remote procedure HandleNewINDClassmCode(var record NewINVc,integer); //Edit***************************Sasha2,16:02 16.12.2015external procedure ExtractObj(string,var Integer,var string);remote procedure HandleNewIN2DClassCode(var record NewINVc, integer);remote procedure HandleNewIN2DClassSubGroup(var record NewINVc, integer);remote procedure NewBPIColor2SClassArrayOnOpen(var Array string,var Integer,string,string);remote procedure NewINBPIOdour2SClassArrayOnOpen(var Array string,var Integer,string,string);//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton 15:29 01.10.2018remote procedure NewINBPIStrap2SClassArrayOnOpen(var Array string,var Integer,string,string);//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton 15:29 01.10.2018remote procedure NewINBPIStone2SClassArrayOnOpen(var Array string,var Integer,string,string);//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton remote procedure NewINBPICut2SClassArrayOnOpen(var Array string,var Integer,string,string);//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton remote procedure NewINBPIWeight2SClassArrayOnOpen(var Array string,var Integer,string,string);//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton remote procedure NewINBPIClarity2SClassArrayOnOpen(var Array string,var Integer,string,string);//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton remote procedure NewINBPIPlating2SClassArrayOnOpen(var Array string,var Integer,string,string);//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton remote procedure NewINBPISex2SClassArrayOnOpen(var Array string,var Integer,string,string);//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton remote procedure NewINBPIUse2SClassArrayOnOpen(var Array string,var Integer,string,string);//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton remote procedure NewINBPISize2SClassArrayOnOpen(var Array string,var Integer,string,string);//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton remote procedure NewINBPIShape2SClassArrayOnOpen(var Array string,var Integer,string,string);//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton remote procedure NewINBPIMaterial2SClassArrayOnOpen(var Array string,var Integer,string,string);//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton remote procedure NewINBPICategory2SClassArrayOnOpen(var Array string,var Integer,string,string);//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton 15:31 01.10.2018remote procedure NewINBPIColor2SClassArrayOnOpen(var Array string,var Integer,string,string);//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton 15:31 01.10.2018remote function string 100 remotegetrecordseq(record GlobalItemVc);remote procedure HandleNewINDClassmVendor(var record NewINVc,integer); //Edit***************************ABR,16:02 14.05.2019remote procedure HandleNewINDClassmAltCode(var record NewINVc,integer);remote procedure NextM4SerialNumber(string,var string);external procedure NextNumber(string,var string);//Edit***************************ABR,16:02 14.05.2019remote function boolean CompanyIsJWLikeCompany(Integer);remote procedure CheckItemCC(var record newINVc, integer);remote procedure INCatSClassArrayOnOpen(var Array string,var Integer);//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton 11:55 06.08.2018remote procedure HandleNewIN2DClassSubGroupAfterCode(var record NewINVc, integer);SetLangMode(LangRussian,"RUS",0);global function boolean StrInArr(string str,array string  arr)begininteger cnt,i;boolean fl;fl=false;for(i=0;i<arr.length;i=i+1) begin	if(str==arr[i]) then begin		fl = true;	end;end;	StrInArr = fl;return;end;procedure NormalizeName(var string name)beginstring 200 newclassname,c;integer i,lenth,zercnt;    lenth = len(name);  for(i=0;i<lenth;i=i+1)begin  	if((asc(mid(name,i,1))>31 and asc(mid(name,i,1))<127) or (asc(mid(name,i,1))>1039 and asc(mid(name,i,1))<1111))then begin  		if(mid(name,i,1)!="\"")then begin  		newclassname = newclassname & mid(name,i,1);  		end;  	end;  end;  name = newclassname;return;end;globalfunction boolean NewINDClassmAlternativeCodeEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;		boolean res;		if(changed>0)then begin		getwindowrecord(wn,newINr);		if(rownr>-1)then begin			HandleNewINDClassmAltCode(newINr,rownr);		end else begin			//		end;		putwindowrecord(wn,newINr);	end;	NewINDClassmAlternativeCodeEFAfter = res;return;end; globalfunction boolean NewINDClassmConsgTypeEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;		row NewINVc newINrw;		boolean res;		if(changed>0)then begin		getwindowrecord(wn,newINr);		if(rownr>-1)then begin			matrowget(newINr,rownr,newINrw);			if(newINrw.ConsgType==0) then begin					newINrw.SerNrf = 2;				end else begin					newINrw.SerNrf = 0;			end;			matrowput(newINr,rownr,newINrw);		end else begin			//		end;		putwindowrecord(wn,newINr);	end;	NewINDClassmConsgTypeEFAfter = res;return;end; //Edit***************************Sasha2,12:00 16.12.2015 {globalfunction boolean NewINDClassmCodeEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;		boolean res;		if(changed>0)then begin		getwindowrecord(wn,newINr);		if(rownr>-1)then begin			HandleNewINDClassmCode(newINr,rownr);		end else begin			//		end;		putwindowrecord(wn,newINr);	end;	NewINDClassmCodeEFAfter = res;return;end; //Edit***************************Sasha2,12:00 16.12.2015 }globalfunction boolean NewINDClassmNameEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;	row NewINVc newINrw;		boolean res;		if(changed>0)then begin		getwindowrecord(wn,newINr);		if(rownr>-1)then begin			matrowget(newINr,rownr,newINrw);				NormalizeName(newINrw.Name);			matrowput(newINr,rownr,newINrw);		end else begin			NormalizeName(newINr.Name);		end;		putwindowrecord(wn,newINr);	end;	NewINDClassmNameEFAfter = res;return;end;global function boolean NewIN2DClassVendorCodeEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw,oldComp,CompQty;	record NewINVc newINr;	record INVc OldINr,tmpINr;	row NewINVc newINrw,newIN2rw;	boolean res,testf,TrHs;	record BPIBrandVc BBr;	string 200 new,old;		if(changed>0)then begin		getwindowrecord(wn,newINr);		if(rownr>-1)then begin			//HandleNewINDClassmVendor(newINr,rownr);				BBr.Code = newINr.Brand;				If(ReadFirstMain(BBr,1,true)) then begin						CheckItemCC(newINr,rownr);				end;		end else begin			//		end;		putwindowrecord(wn,newINr);	end;	NewIN2DClassVendorCodeEFAfter = res;return;end; //Edit***************************ABR,14:30 14.05.2019 }globalfunction boolean NewIN2DClassBrandEFAfter(integer wn,integer changed)begin  record NewINVc newINr;	record BPIBrandVc BPIBr;		boolean res, TrHs;	  TrHs = true;	if(changed!=0)then begin		getwindowrecord(wn,newINr);    BPIBr.Code = newINr.Brand;		if (readfirstmain(BPIBr,1,true)) then begin      newINr.Brand = BPIBr.Code;    end    else begin      BPIBr.Name = newINr.Brand;      if (readfirstkey("Name",BPIBr,1,true)) then begin        newINr.Brand = BPIBr.Code;      end;    end;		putwindowrecord(wn,newINr);	end;	NewIN2DClassBrandEFAfter = res;  return;end;/// РґР»СЏ РјР°С‚СЂРёС†С‹globalfunction boolean NewIN2DClassBrandSCEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIBrandVc BPIBr;	row NewINVc newINrw;		boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);		if(newINrw.BrandSC != newINr.Brand) then begin			messagebox(0,"‘трока" & rownr & "несоответствие брендов");		end;	    BPIBr.Code = newINrw.BrandSC;    if (readfirstmain(BPIBr,1,true)) then begin      newINrw.BrandSC = BPIBr.Code;    end    else begin      BPIBr.Name = newINrw.BrandSC;      if (readfirstkey("Name",BPIBr,1,true)) then begin        newINrw.BrandSC = BPIBr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassBrandSCEFAfter = res;return;end;globalfunction boolean NewINDClassBrandEFAfter(integer wn,integer changed)begin  record NewINVc newINr;	record DIVc DIr;		boolean res, TrHs;	  TrHs = true;	if(changed!=0)then begin		getwindowrecord(wn,newINr);    DIr.Name = newINr.Brand;		if (readfirstKey("Name",DIr,1,true)) then begin			if(DIr.CType=="BRAND") then begin				newINr.Brand = DIr.Code;				res = true;			end;	    end else begin			DIr.CType = "BRAND";			DIr.Code = newINr.Brand;			if(ReadFirstKey("CType",DIr,2,true)) then begin				res = true;			end;		end;		putwindowrecord(wn,newINr);	end;	NewINDClassBrandEFAfter = res;  return;end;/// РґР»СЏ РјР°С‚СЂРёС†С‹globalfunction boolean NewINDClassBrandSCEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIBrandVc BPIBr;	row NewINVc newINrw;		boolean res, TrHs;	record DIVc DIr;			getwindowrecord(wn,newINr);   matrowget(newINr,rownr,newINrw);	if(changed!=0)then begin    DIr.Name = newINrw.BrandSC;		if (readfirstKey("Name",DIr,1,true)) then begin			if(DIr.CType=="BRAND") then begin				newINrw.BrandSC = DIr.Code;				res = true;			end;	    end else begin			DIr.CType = "BRAND";			DIr.Code = newINrw.BrandSC;			if(ReadFirstKey("CType",DIr,2,true)) then begin				res = true;			end;		end;		if(newINrw.BrandSC != newINr.Brand and nonblank(newINr.Brand)) then begin			messagebox(0,"‘трока " & rownr & " несоответствие брендов");		end;	    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewINDClassBrandSCEFAfter = res;return;end;globalfunction boolean NewIN2DClassCollectionEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPICollectionVc BPIColr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    if (readfirstmain(BPIColr,1,true)) then begin      newINrw.Collection = BPIColr.Code;    end    else begin      BPIColr.Name = newINrw.Collection;      if (readfirstkey("Name",BPIColr,1,true)) then begin        newINrw.Collection = BPIColr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassCollectionEFAfter = res;return;end;globalfunction boolean NewINDClassclassif30EFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPICollectionVc BPIColr;	row NewINVc newINrw;	  boolean res, TrHs;	record DIVc DIr;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    DIr.Name = newINrw.classif30;		if (readfirstKey("Name",DIr,1,true)) then begin			if(DIr.CType=="MODEL") then begin				newINrw.classif30 = DIr.Code;				res = true;			end;	    end else begin			DIr.CType = "MODEL";			DIr.Code = newINrw.classif30;			if(readfirstKey("CType",DIr,2,true)) then begin					res = true;			end;			end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewINDClassclassif30EFAfter = res;return;end;globalfunction boolean NewINDClassCategoryEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;	row NewINVc newINrw;	  boolean res, TrHs;  array string 255 asnt;	integer acnt;  TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    INCatSClassArrayOnOpen(asnt,acnt);		for(i=0;i<acnt;i=i+1) begin			if(newINrw.Category==Right(asnt[i],len(asnt[i])-16))then begin				newINrw.Category = left(asnt[i],4);				res = true;			end;			if(newINrw.Category==left(asnt[i],4)) then begin				res = true;			end;		end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewINDClassCategoryEFAfter = res;return;end;globalfunction boolean NewIN2DClassGroupClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIGroupVc BPIGr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIGr.Code = newINrw.GroupCl;    if (readfirstmain(BPIGr,1,true)) then begin      newINrw.GroupCl = BPIGr.Code;    end    else begin      BPIGr.Name = newINrw.GroupCl;      if (readfirstkey("Name",BPIGr,1,true)) then begin        newINrw.GroupCl = BPIGr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassGroupClEFAfter = res;return;end;globalfunction boolean NewINDClassGroupClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIGroupVc BPIGr;	row NewINVc newINrw;	  boolean res, TrHs;  record ITVc ITr;  TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    ITr.Comment = newINrw.GroupCl;		if (readfirstKey("Comment",ITr,1,true)) then begin			newINrw.GroupCl = ITr.Code;				res = true;    end else begin			ITr.Code = newINrw.Code;			if(ReadFirstMain(ITr,1,true)) then begin				res = true;			end;		end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewINDClassGroupClEFAfter = res;return;end;globalfunction boolean NewINDClassGroupEFAfter(integer wn,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIGroupVc BPIGr;	row NewINVc newINrw;	  boolean res, TrHs;  record ITVc ITr;  TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    ITr.Comment = newINr.Group;		if (readfirstKey("Comment",ITr,1,true)) then begin			newINr.Group = ITr.Code;			res = true;    end else begin			ITr.Code = newINr.Group;			if(ReadFirstMain(ITr,1,true)) then begin				res = true;			end;			end;		putwindowrecord(wn,newINr);	end;	NewINDClassGroupEFAfter = res;return;end;globalfunction boolean NewIN2DClassSubGroupClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPISubGroupVc BPISubGr;  record NewClassSetVc NewClassSetr;	row NewINVc newINrw;	  row NewClassSetVc NewClassSetrw;  boolean res, TrHs;    TrHs = true;  	if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);      BPISubGr.Name = newINrw.SubGroupCl;      if (readfirstkey("Name",BPISubGr,1,true)) then begin        newINrw.SubGroupCl = BPISubGr.Code;				matrowput(newINr,rownr,newINrw);				putwindowrecord(wn,newINr);      end;		GetWindowRecord(wn,NewINr);    HandleNewIN2DClassSubGroup(newINr,rownr);		putwindowrecord(wn,newINr);	end;	NewIN2DClassSubGroupClEFAfter = res;return;end;globalfunction boolean NewIN2DClassclassif31EFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw,ni;	record NewINVc newINr;  record BPICategoryVc BPICatr;	row NewINVc newINrw;	array string 255 name;  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPICatr.Code = newINrw.GroupCl;    if (readfirstmain(BPICatr,1,true)) then begin      newINrw.classif31 = BPICatr.Code;    end    else begin      BPICatr.Name = newINrw.classif31;      if (readfirstkey("Name",BPICatr,1,true)) then begin        newINrw.classif31 = BPICatr.Code;      end;    end;		NewINBPICategory2SClassArrayOnOpen(name,ni,NewINrw.GroupCl,NewINrw.SubGroupCl);		if(name.length==0) then begin			newINrw.classif31 = "";		end else begin				if(!StrInArr(newINrw.classif31,name)) then begin				newINrw.classif31 = "*";			end;			end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);    	end;	NewIN2DClassclassif31EFAfter = res;return;end;globalfunction boolean NewIN2DClassMaterialEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw,ni;	record NewINVc newINr;  record BPIMaterialVc BPIMatr;	row NewINVc newINrw;	array string 255 name;  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIMatr.Code = newINrw.Material;    if (readfirstmain(BPIMatr,1,true)) then begin      newINrw.Material = BPIMatr.Code;    end    else begin      BPIMatr.Name = newINrw.Material;      if (readfirstkey("Name",BPIMatr,1,true)) then begin        newINrw.Material = BPIMatr.Code;      end;    end;		NewINBPIMaterial2SClassArrayOnOpen(name,ni,NewINrw.GroupCl,NewINrw.SubGroupCl);		if(name.length==0) then begin			newINrw.Material = "";		end else begin				if(!StrInArr(newINrw.Material,name)) then begin				newINrw.Material = "*";			end;			end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassMaterialEFAfter = res;return;end;globalfunction boolean NewIN2DClassColorEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw,ni;	record NewINVc newINr;  record BPIColorVc BPICor;	row NewINVc newINrw;	  boolean res, TrHs;	array string 255 name;  		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPICor.Code = newINrw.Color;    if (readfirstmain(BPICor,1,true)) then begin      newINrw.Color = BPICor.Code;    end    else begin      BPICor.Name = newINrw.Color;      if (readfirstkey("Name",BPICor,1,true)) then begin        newINrw.Color = BPICor.Code;      end;    end;		NewBPIColor2SClassArrayOnOpen(name,ni,NewINrw.GroupCl,NewINrw.SubGroupCl);		if(name.length==0) then begin			newINrw.Color = "";		end else begin				if(!StrInArr(newINrw.Color,name)) then begin				newINrw.Color = "*";			end;			end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassColorEFAfter = res;return;end;globalfunction boolean NewINDClassColourEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw,ni;	record NewINVc newINr;  record BPIColorVc BPICor;	row NewINVc newINrw;	  boolean res, TrHs;	array string 255 name;  record DIVc DIr;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    DIr.Name = newINrw.Colour;		if (readfirstKey("Name",DIr,1,true)) then begin			if(DIr.CType=="COLOUR") then begin				newINrw.Colour = DIr.Code;				res = true;			end;			end else begin			DIr.CType = "COLOUR";			DIr.Code = newINrw.Colour;			if(readfirstKey("CType",DIr,2,true)) then begin					res = true;			end;			end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewINDClassColourEFAfter = res;return;end;globalfunction boolean NewIN2DClassShapeCutEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw,ni;	record NewINVc newINr;  record BPIShapeVc BPIShaper;	row NewINVc newINrw;	  boolean res, TrHs;  array string 255 name;	  TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIShaper.Code = newINrw.ShapeCut;    if (readfirstmain(BPIShaper,1,true)) then begin      newINrw.ShapeCut = BPIShaper.Code;    end    else begin      BPIShaper.Name = newINrw.ShapeCut;      if (readfirstkey("Name",BPIShaper,1,true)) then begin        newINrw.ShapeCut = BPIShaper.Code;      end;    end;		NewINBPIShape2SClassArrayOnOpen(name,ni,NewINrw.GroupCl,NewINrw.SubGroupCl);		if(name.length==0) then begin			newINrw.ShapeCut = "";		end else begin				if(!StrInArr(newINrw.ShapeCut,name)) then begin				newINrw.ShapeCut = "*";			end;		end;		    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassShapeCutEFAfter = res;return;end;globalfunction boolean NewIN2DClassSizeClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw,ni;	record NewINVc newINr;  record BPISizeVc BPISizer;	row NewINVc newINrw;	  boolean res, TrHs;  array string 255 name;	  TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPISizer.Code = newINrw.SizeCl;    if (readfirstmain(BPISizer,1,true)) then begin      newINrw.SizeCl = BPISizer.Code;    end    else begin      BPISizer.Name = newINrw.SizeCl;      if (readfirstkey("Name",BPISizer,1,true)) then begin        newINrw.SizeCl = BPISizer.Code;      end;    end;		NewINBPISize2SClassArrayOnOpen(name,ni,NewINrw.GroupCl,NewINrw.SubGroupCl);		if(name.length==0) then begin			newINrw.SizeCl = "";		end else begin				if(!StrInArr(newINrw.SizeCl,name)) then begin				newINrw.SizeCl = "*";			end;			end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassSizeClEFAfter = res;return;end;globalfunction boolean NewIN2DClassUseClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw,ni;	record NewINVc newINr;  record BPIUseVc BPIUser;	row NewINVc newINrw;	  boolean res, TrHs;  array string 255 name;	  TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIUser.Code = newINrw.UseCl;    if (readfirstmain(BPIUser,1,true)) then begin      newINrw.UseCl = BPIUser.Code;    end    else begin      BPIUser.Name = newINrw.UseCl;      if (readfirstkey("Name",BPIUser,1,true)) then begin        newINrw.UseCl = BPIUser.Code;      end;    end;		NewINBPIUse2SClassArrayOnOpen(name,ni,NewINrw.GroupCl,NewINrw.SubGroupCl);		if(name.length==0) then begin			newINrw.UseCl = "";		end else begin				if(!StrInArr(newINrw.UseCl,name)) then begin				newINrw.UseCl = "*";			end;			end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassUseClEFAfter = res;return;end;globalfunction boolean NewIN2DClassSexClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw,ni;	record NewINVc newINr;  record BPISexVc BPISexr;	row NewINVc newINrw;	  boolean res, TrHs;  array string 255 name;  TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPISexr.Code = newINrw.SexCl;    if (readfirstmain(BPISexr,1,true)) then begin      newINrw.SexCl = BPISexr.Code;    end    else begin      BPISexr.Name = newINrw.SexCl;      if (readfirstkey("Name",BPISexr,1,true)) then begin        newINrw.SexCl = BPISexr.Code;      end;    end;		NewINBPISex2SClassArrayOnOpen(name,ni,NewINrw.GroupCl,NewINrw.SubGroupCl);		if(name.length==0) then begin			newINrw.SexCl = "";		end else begin				if(!StrInArr(newINrw.SexCl,name)) then begin				newINrw.SexCl = "*";			end;			end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassSexClEFAfter = res;return;end;globalfunction boolean NewIN2DClassPlatingClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw,ni;	record NewINVc newINr;  record BPIPlatingVc BPIPlatr;	row NewINVc newINrw;	  boolean res, TrHs;  array string 255 name;	  TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIPlatr.Code = newINrw.PlatingCl;    if (readfirstmain(BPIPlatr,1,true)) then begin      newINrw.PlatingCl = BPIPlatr.Code;    end    else begin      BPIPlatr.Name = newINrw.PlatingCl;      if (readfirstkey("Name",BPIPlatr,1,true)) then begin        newINrw.PlatingCl = BPIPlatr.Code;      end;    end;		NewINBPIPlating2SClassArrayOnOpen(name,ni,NewINrw.GroupCl,NewINrw.SubGroupCl);		if(name.length==0) then begin			newINrw.PlatingCl = "";		end else begin				if(!StrInArr(newINrw.PlatingCl,name)) then begin				newINrw.PlatingCl = "*";			end;			end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassPlatingClEFAfter = res;return;end;globalfunction boolean NewIN2DClassClaritySCEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw,ni;	record NewINVc newINr;  record BPIClarityVc BPIClar;	row NewINVc newINrw;	  boolean res, TrHs;  array string 255 name;	  TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIClar.Code = newINrw.ClaritySC;    if (readfirstmain(BPIClar,1,true)) then begin      newINrw.ClaritySC = BPIClar.Code;    end    else begin      BPIClar.Name = newINrw.ClaritySC;      if (readfirstkey("Name",BPIClar,1,true)) then begin        newINrw.ClaritySC = BPIClar.Code;      end;    end;		NewINBPIClarity2SClassArrayOnOpen(name,ni,NewINrw.GroupCl,NewINrw.SubGroupCl);		if(name.length==0) then begin			newINrw.ClaritySC = "";		end else begin				if(!StrInArr(newINrw.ClaritySC,name)) then begin				newINrw.ClaritySC = "*";			end;			end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassClaritySCEFAfter = res;return;end;globalfunction boolean NewIN2DClassWeightClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw,ni;	record NewINVc newINr;  record BPIWeightVc BPIWeightr;	row NewINVc newINrw;	  boolean res, TrHs;  array string 255 name;  TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIWeightr.Code = newINrw.WeightCl;    if (readfirstmain(BPIWeightr,1,true)) then begin      newINrw.WeightCl = BPIWeightr.Code;    end    else begin      BPIWeightr.Name = newINrw.WeightCl;      if (readfirstkey("Name",BPIWeightr,1,true)) then begin        newINrw.WeightCl = BPIWeightr.Code;      end;    end;		NewINBPIWeight2SClassArrayOnOpen(name,ni,NewINrw.GroupCl,NewINrw.SubGroupCl);		if(name.length==0) then begin			newINrw.WeightCl = "";		end else begin				if(!StrInArr(newINrw.WeightCl,name)) then begin				newINrw.WeightCl = "*";			end;			end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassWeightClEFAfter = res;return;end;globalfunction boolean NewIN2DClassCutClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw,ni;	record NewINVc newINr;  record BPICutVc BPICutr;	row NewINVc newINrw;	  boolean res, TrHs;  array string 255 name;	  TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPICutr.Code = newINrw.CutCl;    if (readfirstmain(BPICutr,1,true)) then begin      newINrw.CutCl = BPICutr.Code;    end    else begin      BPICutr.Name = newINrw.CutCl;      if (readfirstkey("Name",BPICutr,1,true)) then begin        newINrw.CutCl = BPICutr.Code;      end;    end;		NewINBPICut2SClassArrayOnOpen(name,ni,NewINrw.GroupCl,NewINrw.SubGroupCl);		if(name.length==0) then begin			newINrw.CutCl = "";		end else begin				if(!StrInArr(newINrw.CutCl,name)) then begin				newINrw.CutCl = "*";			end;			end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassCutClEFAfter = res;return;end;globalfunction boolean NewIN2DClassStoneClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw,ni;	record NewINVc newINr;  record BPIStoneVc BPIStoner;	row NewINVc newINrw;	  boolean res, TrHs;  array string 255 name;  TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIStoner.Code = newINrw.StoneCl;    if (readfirstmain(BPIStoner,1,true)) then begin      newINrw.StoneCl = BPIStoner.Code;    end    else begin      BPIStoner.Name = newINrw.StoneCl;      if (readfirstkey("Name",BPIStoner,1,true)) then begin        newINrw.StoneCl = BPIStoner.Code;      end;    end;		NewINBPIStone2SClassArrayOnOpen(name,ni,NewINrw.GroupCl,NewINrw.SubGroupCl);		if(name.length==0) then begin			newINrw.StoneCl = "";		end else begin				if(!StrInArr(newINrw.StoneCl,name)) then begin				newINrw.StoneCl = "*";			end;			end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassStoneClEFAfter = res;return;end;globalfunction boolean NewIN2DClassStrapEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw,ni;	record NewINVc newINr;  record BPIStrapVc BPIStrapr;	row NewINVc newINrw;	  boolean res, TrHs;  array string 255 name;	  TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIStrapr.Code = newINrw.Strap;    if (readfirstmain(BPIStrapr,1,true)) then begin      newINrw.Strap = BPIStrapr.Code;    end    else begin      BPIStrapr.Name = newINrw.Strap;      if (readfirstkey("Name",BPIStrapr,1,true)) then begin        newINrw.Strap = BPIStrapr.Code;      end;    end;		NewINBPIStrap2SClassArrayOnOpen(name,ni,NewINrw.GroupCl,NewINrw.SubGroupCl);		if(name.length==0) then begin			newINrw.Strap = "";		end else begin				if(!StrInArr(newINrw.Strap,name)) then begin				newINrw.Strap = "*";			end;			end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassStrapEFAfter = res;return;end;globalfunction boolean NewIN2DClassOdourClFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw,ni;	record NewINVc newINr;  record BPIOdourVc BPIOdourr;	row NewINVc newINrw;	  boolean res, TrHs;  array string 255 name;  TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIOdourr.Code = newINrw.OdourCl;    if (readfirstmain(BPIOdourr,1,true)) then begin      newINrw.OdourCl = BPIOdourr.Code;    end    else begin      BPIOdourr.Name = newINrw.OdourCl;      if (readfirstkey("Name",BPIOdourr,1,true)) then begin        newINrw.OdourCl = BPIOdourr.Code;      end;    end;		NewINBPIOdour2SClassArrayOnOpen(name,ni,NewINrw.GroupCl,NewINrw.SubGroupCl);		if(name.length==0) then begin			newINrw.OdourCl = "";		end else begin				if(!StrInArr(newINrw.OdourCl,name)) then begin				newINrw.OdourCl = "*";			end;			end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassOdourClFAfter = res;return;end;globalfunction boolean NewIN2DClassCodeEFAfter(integer wn,integer rownr,integer changed)begin	integer i,cnt;	record NewINVc newINr;		boolean res;	record BPISubGroupVc BPISubGr;	row NewINVc newINrw;	if(changed>0 and CurrentCompany!=18)then begin		GetWindowRecord(wn,newINr);		if(rownr>-1)then begin			HandleNewIN2DClassCode(newINr,rownr);		end;		BPISubGr.Name = newINrw.SubGroupCl;      if (readfirstkey("Name",BPISubGr,1,true)) then begin        newINrw.SubGroupCl = BPISubGr.Code;				matrowput(newINr,rownr,newINrw);      end;		putwindowrecord(wn,newINr);			GetWindowRecord(wn,NewINr);    HandleNewIN2DClassSubGroupAfterCode(newINr,rownr);		PutWindowRecord(wn,newINr);	end;	if(changed>0 and CurrentCompany==18)then begin		GetWindowRecord(wn,newINr);		if(rownr>-1)then begin			matrowget(newINr,rownr,newINrw);			if(NewINrw.ConsgType!=3 and NewINrw.ConsgType!=4) then begin				HandleNewIN2DClassCode(newINr,rownr);			end;				matrowput(newINr,rownr,newINrw);		end;		putwindowrecord(wn,newINr)		end;  NewIN2DClassCodeEFAfter = res;  return;end;globalfunction boolean NewIN2DClassConsgTypeEFAfter(integer wn,integer rownr,integer changed)begin	integer i,cnt;	record NewINVc newINr,newIN2r;		boolean res;	record BPISubGroupVc BPISubGr;	row NewINVc newINrw,newIN2rw;	if(changed>0 and CurrentCompany==18)then begin		GetWindowRecord(wn,newINr);		if(rownr>-1)then begin			if (WindowState(wn)==Rs_update) then begin				GetPrevWindowRecord(wn,newIN2r);				matrowget(newINr,rownr,newINrw);				matrowget(newIN2r,rownr,newIN2rw);				if((newIN2rw.ConsgType==3 or newIN2rw.ConsgType==4) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4)) then begin					newINrw.Code = "";				end;			end;				if (WindowState(wn)==Rs_insert) then begin				matrowget(newINr,rownr,newINrw);				if(newINrw.ConsgType!=3 and newINrw.ConsgType!=4) then begin					newINrw.Code = "";				end;			end;		end;		matrowput(newINr,rownr,newINrw);		PutWindowRecord(wn,newINr);	end;  NewIN2DClassConsgTypeEFAfter = res;  return;end;globalfunction Boolean NewINDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)BEGIN  Boolean res;  res = true;  switch (fieldname) begin    case "Code": res = NewINDClassmCodeEFAfter(wn,rownr,changed); //Edit***************************Sasha2,12:00 16.12.2015    case "Name": res = NewINDClassmNameEFAfter(wn,rownr,changed);		case "AlternativeCode": res = NewINDClassmAlternativeCodeEFAfter(wn,rownr,changed);		case "ConsgType": res = NewINDClassmConsgTypeEFAfter(wn,rownr,changed);		case "Brand": res = NewINDClassBrandEFAfter(wn,changed);		case "BrandSC": res = NewINDClassBrandSCEFAfter(wn,rownr,changed);		case "GroupCl": res = NewINDClassGroupClEFAfter(wn,rownr,changed); 		case "Group": res = NewINDClassGroupEFAfter(wn,changed);		case "Colour": res = NewINDClassColourEFAfter(wn,rownr,changed);		case "classif30": res = NewINDClassclassif30EFAfter(wn,rownr,changed);		case "Category": res = NewINDClassCategoryEFAfter(wn,rownr,changed);  end;  NewINDClassAfterEditField = res;  RETURN;END;globalfunction Boolean NewIN2DClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)BEGIN  Boolean res;	record NewINVc NewINr;  res = true;	GetWindowRecord(wn,NewINr);	switch (fieldname) begin				case "Code": res = NewIN2DClassCodeEFAfter(wn,rownr,changed); 		case "Brand": res = NewIN2DClassBrandEFAfter(wn,changed);		case "BrandSC": res = NewIN2DClassBrandSCEFAfter(wn,rownr,changed);		case "Collection": res = NewIN2DClassCollectionEFAfter(wn,rownr,changed);		case "GroupCl": res = NewIN2DClassGroupClEFAfter(wn,rownr,changed);		case "SubGroupCl": if(NewINr.Brand!="BRND0046")then begin res = NewIN2DClassSubGroupClEFAfter(wn,rownr,changed); end;		case "classif31": res = NewIN2DClassclassif31EFAfter(wn,rownr,changed);		case "Material": res = NewIN2DClassMaterialEFAfter(wn,rownr,changed);		case "Color": res = NewIN2DClassColorEFAfter(wn,rownr,changed);		case "ShapeCut": res = NewIN2DClassShapeCutEFAfter(wn,rownr,changed);		case "SizeCl": res = NewIN2DClassSizeClEFAfter(wn,rownr,changed);		case "UseCl": res = NewIN2DClassUseClEFAfter(wn,rownr,changed);		case "SexCl": res = NewIN2DClassSexClEFAfter(wn,rownr,changed);		case "PlatingCl": res = NewIN2DClassPlatingClEFAfter(wn,rownr,changed);		case "ClaritySC": res = NewIN2DClassClaritySCEFAfter(wn,rownr,changed);		case "WeightCl": res = NewIN2DClassWeightClEFAfter(wn,rownr,changed);		case "CutCl": res = NewIN2DClassCutClEFAfter(wn,rownr,changed);		case "StoneCl": res = NewIN2DClassStoneClEFAfter(wn,rownr,changed);		case "Strap": res = NewIN2DClassStrapEFAfter(wn,rownr,changed); 		case "OdourCl": res = NewIN2DClassOdourClFAfter(wn,rownr,changed);		case "VendorCode": res = NewIN2DClassVendorCodeEFAfter(wn,rownr,changed);		case "ConsgType": res = NewIN2DClassConsgTypeEFAfter(wn,rownr,changed);	end;  NewIN2DClassAfterEditField = res;  RETURN;END;globalfunction Boolean NewINDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)begin	record NewINVc newINr;	boolean res;		res = true;		getwindowrecord(wn,newINr);		if(newINr.OKFlag==1)then begin		res = false;		if(fieldname=="OKFlag")then begin			res = true;		end;	end;			NewINDClassActiveEditField = res;	return;end;globalfunction Boolean NewIN2DClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)begin	record NewINVc newINr;	row NewINVc newINrw;	boolean res;	record ConsCompBlock CCB;		BlockLoad(CCB);	res = true;		getwindowrecord(wn,newINr);	if(CCB.OKFlag!=0) then begin		if(rownr>-1) then begin			matrowget(newINr,rownr,newINrw);			if(fieldname=="Code" and newINrw.ConsgType!=3 and newINrw.ConsgType!=4) then begin				res = false;			end;		end;			if(Blank(newINr.Brand) and fieldname!="Brand" and fieldname!="Group" and rownr>-1) then begin 			res = false;			MessageBox(0,"Џоле Brand должен быть заполнен!");		end;			if(fieldname=="Brand" or fieldname=="Group") then begin			res = true;		end;	end;		/*if(left(currentuser,2)=="SA")then begin		res = true;	end;*/		NewIN2DClassActiveEditField = res;	return;end;global updating procedure ExportINToOthDsm()beginrecord NewINVc newINr;record NewINVc OthCompnewINr;integer wn;integer curcomp;curcomp = currentcompany;wn=CurWindow;GetWindowRecord(wn,newINr);	if(CurrentCompany == 4) then begin		SetCompany(25,false);		RecordNew(OthCompnewINr);		RecordCopy(OthCompnewINr,newINr);		OthCompnewINr.SerNr = NextSerNr("NewINVc",currentdate,-1,false,""); 			OthCompnewINr.OKFlag=0;		RecordStore(OthCompnewINr,true);		SetCompany(curcomp,false);	end else begin 		SetCompany(4,false);		RecordNew(OthCompnewINr);		RecordCopy(OthCompnewINr,newINr);		OthCompnewINr.SerNr = NextSerNr("NewINVc",currentdate,-1,false,""); 			OthCompnewINr.OKFlag=0;		RecordStore(OthCompnewINr,true);		SetCompany(curcomp,false);	end;	return;end;global procedure SortbySub()begin record newINVc nINr;integer wn;wn = curwindow;getwindowrecord(wn,nINr);SortRows(nINr,"SubGroupCl",true);putwindowrecord(wn,nINr);return;end;global procedure GIServerSequenceDsm()begin	integer wn;	record GlobalItemVc GIr,origGIr;		wn = curwindow;	getwindowrecord(wn,GIr);		messagebox(0,remotegetrecordseq(GIr));return;end;/*global function boolean CheckChangesCodeNewINVc(Integer rownr)beginboolean res;integer wn;res = true;wn = curwindow;if(!NewINDClassCategoryEFAfter(wn,rownr,1)) then begin	res = false;	messagebox(0,"Ќе найдена категориЯ в строке - " & rownr);end;if(!NewINDClassclassif30EFAfter(wn,rownr,1)) then begin	res = false;	messagebox(0,"Ќе найдена модель в строке - " & rownr);end;if(!NewINDClassColourEFAfter(wn,rownr,1)) then begin	res = false;	messagebox(0,"Ќе найден цвет в строке - " & rownr);end;if(!NewINDClassGroupEFAfter(wn,1)) then begin	res = false;	messagebox(0,"Ќе найдена группа");end;if(!NewINDClassBrandEFAfter(wn,1)) then begin	res = false;	messagebox(0,"Ќе найден бренд");end;if(!NewINDClassBrandSCEFAfter(wn,rownr,2)) then begin	res = false;	messagebox(0,"Ќе найден бренд в строке - " & rownr);end;CheckChangesCodeNewINVc = res;return;end;*/