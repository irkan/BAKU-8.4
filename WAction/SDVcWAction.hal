external function string 60 RemoveObjectFromObjectList(string,string);
external function string 60 AddObjectToObjectList(string,string);
remote updating function LongInt CancelApprovalRequest(string,string,var Integer);
remote updating function Integer RequestApproval_SDVc(record SDVc,var record RcVc,var Integer);
remote function Integer SDApprovalStatus(record SDVc,var record AcceptanceRulesVc);
remote procedure SDDClassOnOpenWindowRemote(var record SDVc,var Integer);
remote function Integer SDTestApprovalStatus(record SDVc);
external function string 40 ObjSClassPasteSpecialWindowClass(string);
external function Integer CountObjects(string);
external procedure ExtractObj(string,var Integer,var string);
external function Integer OpenArtStat(Integer,record RcVc,Boolean);
remote procedure SDVc_PasteSerialNr(var record SDVc,Integer,var string);
external procedure WarnFutureDate(Boolean,Date);
remote function Integer CreateQualConFromSD(record SDVc,Integer,var record QualConVc,Integer);
external procedure FindOTforAcc(string,var string);
external function Boolean TestForMATVARINS(Integer);
remote procedure SDVc_PastePosCode(var record SDVc,Integer);
external function string 40 SerialNrSClassSpecPName(string);
remote function Boolean SDVc_PasteQty(var record SDVc,Integer);
remote function Boolean SDVc_PasteArtCode(var record SDVc,Integer,Integer,var string,var string);
external function Boolean WarnOldRecords(Date,string,LongInt );
external function Boolean DateWarned(Date,string);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
external function val CalculateSerialNrQuantity(string,string,string,Boolean,val,val,val,val);
external procedure SDSumUp(var record SDVc);
external procedure GetACShortAccount(string,var string,var string);
external procedure NormalizeObjstr(var string);
remote procedure SplitSDrByCurrency(var array record SDVc,record SDVc,var array string,var Integer);
external function Boolean PUVc_PasteVECode(var record PUVc);
external procedure PUVc_PasteCostPrice(var record PUVc,Integer);
external function Boolean PUVc_PasteArtCode(var record PUVc,Integer,var string,var string);
external procedure PUSumUp(var record PUVc);
external procedure PUVc_PasteLocation(var record PUVc,Integer);
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
remote procedure CreateINConsItem(string,integer);

global
function Boolean SDDClassSwitchRow(Integer wn,Integer rownr)
begin        
  record SDVc SDr;  
  row SDVc SDrw; 
  Integer rwcnt;
  Boolean res;
  val t,tproc,unitprdisc,s,rowsum,sum;
  string 255 recepy,location;

  res = true;
  GetWindowRecord(wn,SDr);
  rwcnt = MatRowCnt(SDr);  
  if ((rownr<rwcnt) and (rownr>=0)) then begin
    MatRowGet(SDr,rownr,SDrw);
    recepy = SDrw.Recepy;
    location = SDrw.Location;
    if (blank(location)) then begin   
      location = SDr.Location;
    end;
    SendArtStat(SDrw.ArtCode,location,recepy,t,tproc,unitprdisc,SDr.TransDate,0);
    SetWindowNameArg(wn,SDrw.ArtCode & ":" & location);
  end;
  SDDClassSwitchRow = res;  
  return;
end;

global
function Boolean SDDClassUnitXvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  row SDVc SDrw;
  record SDVc SDr;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,SDr);
    MatRowGet(SDr,rownr,SDrw);
    SDrw.Qty = CalculateSerialNrQuantity(SDrw.ArtCode,"","",false,SDrw.UnitXval,SDrw.UnitYval,SDrw.UnitZval,SDrw.Qty);
    MatRowPut(SDr,rownr,SDrw);
    SDSumUp(SDr);    
    PutWindowRecord(wn,SDr);    
  end;
  SDDClassUnitXvalEFAfter = res;
  RETURN;
END;

global
function Boolean SDDClassUnitYvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  row SDVc SDrw;
  record SDVc SDr;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,SDr);
    MatRowGet(SDr,rownr,SDrw);
    SDrw.Qty = CalculateSerialNrQuantity(SDrw.ArtCode,"","",false,SDrw.UnitXval,SDrw.UnitYval,SDrw.UnitZval,SDrw.Qty);
    MatRowPut(SDr,rownr,SDrw);
    SDSumUp(SDr);    
    PutWindowRecord(wn,SDr);    
  end;
  SDDClassUnitYvalEFAfter = res;
  RETURN;
END;

global
function Boolean SDDClassUnitZvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  row SDVc SDrw;
  record SDVc SDr;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,SDr);
    MatRowGet(SDr,rownr,SDrw);
    SDrw.Qty = CalculateSerialNrQuantity(SDrw.ArtCode,"","",false,SDrw.UnitXval,SDrw.UnitYval,SDrw.UnitZval,SDrw.Qty);    
    MatRowPut(SDr,rownr,SDrw);
    SDSumUp(SDr);    
    PutWindowRecord(wn,SDr);    
  end;
  SDDClassUnitZvalEFAfter = res;
  RETURN;
END;

global
function Boolean SDDClassSerialNrEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record SDVc SDr;
  Boolean res;
  string 255 inwarn;

  res = true;
  if ((changedf) and (rownr>=0)) then begin
    GetWindowRecord(wn,SDr);
    SDVc_PasteSerialNr(SDr,rownr,inwarn);
    if (nonblank(inwarn)) then begin
      MessageBox(0,inwarn);
    end;
    PutWindowRecord(wn,SDr);    
  end;
  SDDClassSerialNrEFAfter = res;
  RETURN;
END;

function Boolean SDDClassTransDateEFAfter(Integer wn,Integer changed)
BEGIN
  row SDVc SDrw;
  record SDVc SDr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,SDr);
    if (DateWarned(SDr.TransDate,"SDVc")) then begin
      MessageBox(1045,"");
    end;
    if (WarnOldRecords(SDr.TransDate,"SDVc",SDr.SerNr)) then begin
      MessageBox(2020,"");
    end;
    WarnFutureDate(true,SDr.TransDate);
    PutWindowRecord(wn,SDr);    
//JJCS
  end;
  SDDClassTransDateEFAfter = res;
  RETURN;
END;

function Boolean SDDClassArtCodeEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record SDVc SDr;
  Boolean res;
  string 255 inwarning,warning;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,SDr);
    if (SDVc_PasteArtCode(SDr,rownr,changed,inwarning,warning)) then begin
      if (nonblank(inwarning)) then begin
        MessageBox(0,inwarning);
      end;
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
      PutWindowRecord(wn,SDr);    
      if (SDDClassSwitchRow(wn,rownr)) then begin end;
    end else begin
      Beep;
    end;
  end;
  SDDClassArtCodeEFAfter = res;
  RETURN;
END;

function Boolean SDDClassQtyEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record SDVc SDr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,SDr);
    if (SDVc_PasteQty(SDr,rownr)) then begin
      PutWindowRecord(wn,SDr);    
    end else begin
      Beep;
    end;
  end;
  SDDClassQtyEFAfter = res;
  RETURN;
END;

function Boolean SDDClassPosCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record SDVc SDr;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,SDr);
    SDVc_PastePosCode(SDr,rownr);
    PutWindowRecord(wn,SDr);    
  end;
  SDDClassPosCodeEFAfter = res;
  RETURN;
END;

function Boolean SDVc_PasteACShort(var record SDVc SDr,Integer rownr)
BEGIN
  row SDVc SDrw;
  string 255 tstr,obj;
  Boolean res;
  
  if (rownr>=0) then begin
    MatRowGet(SDr,rownr,SDrw);
    GetACShortAccount(SDrw.ACShort,tstr,obj);
    SDrw.CostAcc = tstr;
    SDrw.Objects = obj;
    if (nonblank(obj)) then begin
      if (nonblank(SDrw.Objects)) then begin
        if (obj<>SDrw.Objects) then begin
          obj = obj & "," & SDrw.Objects;
          NormalizeObjstr(obj);
        end;  
      end;        
      SDrw.Objects = obj;
    end;
    MatRowPut(SDr,rownr,SDrw);
    res = true;
  end else begin
    GetACShortAccount(SDr.ACShort,tstr,obj);
    SDr.CostAcc = tstr;
    SDr.Objects = obj;
    if nonblank(obj) then begin
      if nonblank(SDr.Objects) then begin
        if (obj<>SDr.Objects) then begin
          obj = obj & "," & SDr.Objects;
          NormalizeObjstr(obj);
        end;  
    end;        
      SDr.Objects = obj;
    end;
    res = true;
    
  end;  
  SDVc_PasteACShort = res;
  RETURN;
END;

function Boolean SDDClassACShortEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record SDVc SDr;
  Boolean res;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,SDr);
    res = SDVc_PasteACShort(SDr,rownr);
    PutWindowRecord(wn,SDr);    
  end;
  SDDClassACShortEFAfter = res;
  RETURN;
END;

function Boolean SDVc_PastePRCode(var record SDVc SDr)
begin
  Boolean res;
  record PRVc PRr;
  
  PRr.Code = SDr.PRCode;
  if (ReadFirstMain(PRr,1,true)) then begin
    SDr.Objects = AddObjectToObjectList(SDr.Objects,PRr.Objects);        
  end;
  SDVc_PastePRCode = res;
  return;
end;

function Boolean SDDClassPRCodeEFAfter(Integer wn,Boolean changedf)
begin
  record SDVc SDr;
  Boolean res;
  
  if (changedf) then begin
    GetWindowRecord(wn,SDr);
    res = SDVc_PastePRCode(SDr);
    PutWindowRecord(wn,SDr);    
  end;
  SDDClassPRCodeEFAfter = res;
  return;
end;

function Boolean SDVc_PastePRCodeRow(var record SDVc SDr,Integer rownr)
begin
  Boolean res;
  row SDVc SDrw;
  record PRVc PRr;
  
  if (rownr>=0) then begin
    MatRowGet(SDr,rownr,SDrw);
    if (nonblank(SDr.PRCode)) then begin
      PRr.Code = SDr.PRCode;
      if (ReadFirstMain(PRr,1,true)) then begin
        SDr.Objects = RemoveObjectFromObjectList(SDr.Objects,PRr.Objects);
      end;
    end;
    PRr.Code = SDrw.PRCodeRow;
    if (ReadFirstMain(PRr,1,true)) then begin
      SDrw.Objects = AddObjectToObjectList(SDrw.Objects,PRr.Objects);        
    end;
    MatRowPut(SDr,rownr,SDrw);
  end;
  SDVc_PastePRCodeRow = res;
  return;
end;

function Boolean SDDClassPRCodeRowEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record SDVc SDr;
  Boolean res;
  
  if (changedf) then begin
    GetWindowRecord(wn,SDr);
    res = SDVc_PastePRCodeRow(SDr,rownr);
    PutWindowRecord(wn,SDr);    
  end;
  SDDClassPRCodeRowEFAfter = res;
  return;
end;

global
function Boolean SDDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Qty": res = SDDClassQtyEFAfter(wn,rownr,changed);
    case "ArtCode": res = SDDClassArtCodeEFAfter(wn,rownr,changed);
    case "TransDate": res = SDDClassTransDateEFAfter(wn,changed);
    case "SerialNr": res = SDDClassSerialNrEFAfter(wn,rownr,changed!=0);
    case "UnitZval": res = SDDClassUnitZvalEFAfter(wn,fn,rownr,changed);
    case "UnitYval": res = SDDClassUnitYvalEFAfter(wn,fn,rownr,changed);
    case "UnitXval": res = SDDClassUnitXvalEFAfter(wn,fn,rownr,changed);
    case "PosCode": res = SDDClassPosCodeEFAfter(wn,fn,rownr,changed);
    case "ACShort": res = SDDClassACShortEFAfter(wn,fn,rownr,changed);
    case "PRCode": res = SDDClassPRCodeEFAfter(wn,changed!=0);
    case "PRCodeRow": res = SDDClassPRCodeRowEFAfter(wn,rownr,changed!=0);
  end;
  SDDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean SDDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record SDVc SDr;
  Boolean res;

  if (rownr>=0) then begin
    GetWindowRecord(wn,SDr);    
    SDSumUp(SDr);
    PutWindowRecord(wn,SDr);    
  end;
  res = true;
  SDDClassOnOverStrike = true;
  RETURN;
END;

global
procedure ItemStatusSDDsm()
BEGIN
  Integer wn,nwn;
  Boolean testf;
  record RcVc RepSpec;
  
  wn = CurWindow;
  nwn = OpenArtStat(wn,RepSpec,false);
  testf = SDDClassSwitchRow(wn,WindowActiveRow(wn));
  RETURN
END;

global 
function Boolean SDDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record SDVc SDr;
  Boolean res;

  res = true;
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,SDr);    
  end;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,SDr);    
  end;
  if (SDr.OKFlag!=0) then begin res = false; end;
  SDDClassDeleteRowTest = res;
  return;
end;

global 
function Boolean SDDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record SDVc SDr;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetWindowRecord(wn,SDr);
    if (SDr.OKFlag!=0) then begin res = false; end;
  end;
  SDDClassInsertRowTest = res;
  return;
end;

global
function Boolean SDDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record SDVc SDr;
  row SDVc SDrw;
  
  res = true;
  GetWindowRecord(wn,SDr);
  switch (wnst) begin
    case Rs_insert:
      res = true;
    otherwise
      if (SDr.OKFlag!=0) then begin
        res = false;
      end;
  end;
  switch (fieldname) begin
    case "Comment": res = true;
    case "FIFO": res = false;
    case "FIFORowVal": res = false;
    case "Spec":
      if (HasLocalization("PRT")) then begin
        MatRowGet(SDr,rownr,SDrw);
        if (nonblank(SDrw.ArtCode)) then begin
          res = false;
        end;
      end;
  end;
  if(currentuser=="SA1")then begin  // edited by BPI {
  	res = true;
  end;  // edited by BPI } 

  SDDClassActiveEditField = res;
  return;
end;

global
function Boolean SDDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  Integer normalmode,updatemode;
  record SDVc SDr;
  Integer err;

  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==Rs_insert) then begin
    GetWindowRecord(wn,SDr);
    if (SDr.OKFlag!=0) then begin
      res = true;
      goto LSDDClassOKFlagButtonAction;
    end;
    err = SDTestApprovalStatus(SDr);
    if (err!=0) then begin
      MessageBox(err,"");
      res = false;
      goto LSDDClassOKFlagButtonAction;
    end;
  end;
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,SDr);
    err = SDTestApprovalStatus(SDr);
    if (err!=0) then begin
      MessageBox(err,"");
      res = false;
      goto LSDDClassOKFlagButtonAction;
    end;
    if (SDr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
      goto LSDDClassOKFlagButtonAction;
    end;  
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,SDr);
    err = SDTestApprovalStatus(SDr);
    if (err!=0) then begin
      MessageBox(err,"");
      res = false;
      goto LSDDClassOKFlagButtonAction;
    end;
  end;  
  if (SDr.OKFlag!=0) then begin
    res = false;
  end;
LSDDClassOKFlagButtonAction:;  
  SDDClassOKFlagButtonAction = res;
  return;
end;

function string 40 SDDClassSpecPasteNameObjects(Integer wn)
BEGIN
  record SDVc SDr;
  row SDVc SDrw;
  Integer rownr;
  string 200 typ;
  string 255 psname,accnr;

  GetWindowRecord(wn,SDr);
  rownr = WindowActiveRow(wn);
  typ="";
  if (rownr>=0) then begin
    MatRowGet(SDr,rownr,SDrw);
    accnr = SDrw.CostAcc;
  end;
  if (blank(accnr)) then begin
    accnr = SDr.CostAcc;
  end;
  FindOTforAcc(accnr,typ);
  if (nonblank(typ)) then begin
    psname = "TRObjSClass";
  end else begin    
    psname = ObjSClassPasteSpecialWindowClass("ObjSClass");
  end;
  SDDClassSpecPasteNameObjects = psname;
  RETURN;
END;

procedure SDDClassSpecPasteNameArtCode(Integer wn,var string psname)
begin
  record SDVc SDr;
  Integer rownr;

  GetWindowRecord(wn,SDr);
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,false);
  WindowFieldGoto(wn,SDr,rownr,"ArtCode",false);
  return;
end;

global
function string 40 SDDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
    case "Objects": psname = SDDClassSpecPasteNameObjects(wn);
    case "ArtCode": SDDClassSpecPasteNameArtCode(wn,psname);
  end;
  SDDClassSpecPasteName = psname;
  return;
end;

global
function Boolean SDDClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
BEGIN
  Boolean res;
  record SDVc SDr;
  row SDVc SDrw;

  switch (fieldname) begin  
    case "Qty":     
      GetWindowRecord(wn,SDr);      
      MatRowGet(SDr,rownr,SDrw);
      if (SDrw.Qty==0) then begin
        if (TestForMATVARINS(wn)) then begin end;
      end;
  end;
  SDDClassBeforeEditField = res;
  return;
end;

global
procedure QualConFromSDDsm()
begin
  Integer wn,nwn;
  Integer rownr,err;
  record SDVc SDr;
  record QualConVc QCr;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    rownr = WindowActiveRow(wn);
    DeselectWindow(wn,true);
    GetWindowRecord(wn,SDr);
    err = CreateQualConFromSD(SDr,rownr,QCr,0);
    if (err==0) then begin
      nwn = OpenWindow("QualConDClass",1,0,"","",QCr);
    end else begin
      MessageBox(err,"");
    end;
  end else begin
    MessageBox(22064,"");
  end;
  return;
end;

global
updating procedure SDSendforAcceptanceSDDsmExecute(Integer wn,string acceptanceby,string acceptancefyi)
begin
  Integer err,nwn;
  record SDVc SDr;
  Integer ApproverSelection,ApprovalStatusFlag;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,SDr);
  if (WindowState(wn)!=Rs_normal) then begin
    if (WindowDoOK(wn,0)==false) then begin
      goto LSDSendforAcceptanceSDDsm;
    end;
    GetWindowRecord(wn,SDr);
  end;
  SDr.AcceptanceBy = acceptanceby;
  SDr.AcceptanceFYI = acceptancefyi;
  err = RequestApproval_SDVc(SDr,RepSpec,ApprovalStatusFlag);
  ApproverSelection = RepSpec.ArtMode;
  if ((ApproverSelection==kAcceptanceApproverSelectionManual) and (blank(SDr.AcceptanceBy))) then begin
    switch (err) begin  
      case 0:
        if (CountObjects(RepSpec.f12)==1) then begin
          RepSpec.f1 = RepSpec.f12;
        end;
        if (CountObjects(RepSpec.f11)==1) then begin
          RepSpec.f2 = RepSpec.f11;
        end;
        nwn = OpenWindow("SelectApproverWClass",0,wn,"","",RepSpec);
      otherwise
        MessageBox(err,"");
    end;
  end else begin
    switch (err) begin  
      case 0:
        PutWindowRecord(wn,SDr);
        if (WindowDoOK(wn,0)) then begin
        end;
        PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
        CheckmarkBox(37501,"");
      otherwise
        MessageBox(err,"");
    end;
  end;
LSDSendforAcceptanceSDDsm:;  
  return;
end;

global
updating procedure SDSendforAcceptanceSDDsm()
begin
  SDSendforAcceptanceSDDsmExecute(CurWindow,"","");
  return;
end;

global
updating procedure SDCancelApprovalRequest(Integer wn)
begin
  record SDVc SDr;
  Integer ApprovalStatusFlag;
  LongInt err;

  GetWindowRecord(wn,SDr);
  err = CancelApprovalRequest("SDVc",SDr.SerNr,ApprovalStatusFlag);
  if (err!=0) then begin
    MessageBox(err,"");
    if (err!=37503) then begin
      goto LSDCancelApprovalRequest;
    end;
  end;
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
LSDCancelApprovalRequest:;
  return;
end;

global
function Boolean SDDClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record SDVc SDr;
  row SDVc SDrw;
  record ObjVc Objr;
  Integer nwn,pos;
  
  switch (fieldname) begin
    case "Objects":
      GetWindowRecord(wn,SDr);  
      if (rownr>=0) then begin
        MatRowGet(SDr,rownr,SDrw);
        if (nonblank(SDrw.Objects)) then begin
          ExtractObj(SDrw.Objects,pos,Objr.Code);
          if (ReadFirstMain(Objr,1,true)) then begin
            nwn = OpenWindow("ObjDClass",1,0,"","",Objr); 
            res = true;   
          end;
        end;
      end else begin
        if (nonblank(SDr.Objects)) then begin
          ExtractObj(SDr.Objects,pos,Objr.Code);
          if (ReadFirstMain(Objr,1,true)) then begin
            nwn = OpenWindow("ObjDClass",1,0,"","",Objr); 
            res = true;   
          end;
        end;
      end;
  end;
  SDDClassOpenRecord = res;
  return;
end;

global
updating procedure CreatePUConsDsm()
begin
	record SDVc NilSDr,SDr;
  record UserVc Userr;
  record ORVc ORr;
	LongInt res;
	record PUVc PUr;
	row PUVc PUrw;
	integer oldComp,i,rwcnt,k,m,curcnt,wn;
	string 255 VECode,warning,inwarn;
	record LocationVc Locr,Loc1r;
	row SDVc SDrw;
	record ConsItemVc CIr;
	record BPIBrandVc BBr;
	array record SDVc curSD;
	array string 20 currs;
	record BaseCurBlock BCb,targetBCb;
	string 5 curcode,sourcecurcode;
	val fr,to1,to2,br1,br2,s; 
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	record PosVc Posr;
	record SDVc SD1r;
	logtext(0,"start");
oldComp = CurrentCompany;
	BlockLoad(Compb);
	BlockLoad(targetBCb);
	matrowget(Compb,oldComp-1,Comprw);
	 wn = CurWindow;
   GetWindowRecord(wn,SDr);
	 logtext(0,"SDRr - " & SDr.CostAcc & " " & SetInSet("CENTRAL_RETURN",SDr.Objects));
	if(SDr.CostAcc=="41/06" and SetInSet("CENTRAL_RETURN",SDr.Objects)) then begin
		SplitSDrByCurrency(curSD,SDr,currs,curcnt);
		logtext(0,"SDRrnumb - " & curcnt);
		if(curcnt==0) then begin curcnt=1; curSD[0] = SDr; end;
  	for (m=0;m<curcnt;m=m+1) begin
			SD1r = curSD[m];
			Loc1r.Code = SD1r.Location;
			if(ReadFirstMain(Loc1r,1,true)) then begin
				if(nonblank(Loc1r.FOBSuplier)) then begin
					VECode = Loc1r.FOBSuplier;
				end;	
			end;	
			SetCompany(18,false);
			RECORDNEW(PUr);
			PUr.VECode = VECode;
			PUVc_PasteVECode(PUr);
			PUr.TransDate = SD1r.TransDate;
			if (currs[m]!=targetBCb.BaseCur1) then begin
				curcode = currs[m];
				fr = blankval;
				to1 = blankval;
				to2 = blankval;
				br1 = blankval;
				br2 = blankval;
				GetFullCurncyRate(curcode,PUr.TransDate,fr,to1,to2,br1,br2);
				if (curcode!=currs[m]) then begin
					logtext(0,"No currency " & currs[m] & " in target company " & Comprw.ShortName);
				end;
				PUr.CurncyCode = curcode;
				PUr.FrRate = fr;
				PUr.ToRateB1 = to1; 
				PUr.ToRateB2 = to2;
				PUr.BaseRate1 = br1;
				PUr.BaseRate2 = br2;
			end;
			PUr.VEName = "#Stock Depreciation# " & SDr.SerNr & " from company " & Comprw.ShortName;
			if (PUr.SerNr<=0) then begin
				PUr.SerNr = NextSerNr("PUVc",PUr.TransDate,-1,false,"");
			end;	
			logtext(0,"PUr Sernr - " & PUr.SerNr);
			rwcnt = MatRowCnt(SD1r);
			for (i=0;i<rwcnt;i=i+1) begin
				
				MatRowGet(SD1r,i,SDrw);
				ClearRow(PUr,PUrw,1);
				CreateINConsItem(SDrw.ArtCode,oldComp);
				CIr.LocCode = SDrw.ArtCode;
				if(ReadFirstKey("LocCodeBrand",CIr,1,true)) then begin end;
				PUrw.ArtCode = CIr.Code;
				MatRowPut(PUr,i,PUrw);
				PUVc_PasteArtCode(PUr,i,warning,inwarn);
				MatRowGet(PUr,i,PUrw);
				BBr.Code = CIr.BrandCode;
				if(ReadFirstMain(BBr,1,true)) then begin end;
				PUrw.ToPosCode = BBr.CWHCode;
				Posr.Code = BBr.CWHCode;
				if(ReadFirstMain(Posr,1,true)) then begin end;
				PUrw.Location = Posr.Location;
				MatRowPut(PUr,i,PUrw);
				PUVc_PasteLocation(PUr,i);
				MatRowGet(PUr,i,PUrw);
				Locr.Code = Posr.Location;
				PUrw.Objects = "";
				If(ReadFirstMain(Locr,1,true)) then begin end;
				if(nonblank(Locr.Objects)) then begin
					if (NonBlank(PUrw.Objects)) then begin
						PUrw.Objects = PUrw.Objects & "," & Locr.Objects;
					end else begin
						PUrw.Objects = Locr.Objects;
					end;
				end;	
				if (NonBlank(PUrw.Objects)) then begin
					PUrw.Objects =  PUrw.Objects & "," & SDrw.Objects;
				end else begin
					PUrw.Objects = SDrw.Objects;
				end;
				MatRowPut(PUr,i,PUrw);
				MatRowGet(PUr,i,PUrw);
				PUrw.Quant = SDrw.Qty;
				MatRowPut(PUr,i,PUrw);
				//PUVc_PasteQuant(PUr,k);//Commented Edit ************************** BPI Ukraine - KramarAlexandr - 02, 06 08 2019 y. at 3:34:03 PM
				MatRowGet(PUr,i,PUrw);
				PUrw.UPrice = SDrw.FIFORowVal;
				PUrw.SerialNr = SDrw.SerialNr;// Edit ************************** BPI Ukraine - KramarAlexandr - 03, 25 09 2019 y. at 9:41:17 AM
				/*PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
								PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
								PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
								PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
				PUrw.CostPrice = p;
				PUrw.Sum = s;*/
				PUrw.CostPrice = SDrw.FIFO;
				MatRowPut(PUr,i,PUrw);
				PUVc_PasteCostPrice(PUr,i);
				MatRowGet(PUr,i,PUrw);
				PUrw.Extra = blankval;// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 1 August 2019 16:24:38
				//s = SDrw.FIFO*PUrw.Quant;
				//PUrw.Sum = s;
				PUrw.CredAcc = "99999";
				MatRowPut(PUr,i,PUrw);
				
			end;
			PUSumUp(PUr);
			if (RECORDSTORE(PUr,false)) then begin
				CreateRecordLink(SDr,oldComp,PUr,currentcompany);
				CreateRecordLink(PUr,currentcompany,SDr,oldComp);
			end;	
		end;	
	end;	
	logtext(0,"end");
	ResetCompany(oldComp);
return;
end;

global
procedure SDStatusDsm()
begin
  record RcVc RepSpec;
  record SDVc SDr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,SDr);
  RepSpec.f1 = SDr.SerNr;
  RepSpec.repname = "SDStatusRn";
  RepSpec.Media   = mtScreen;    
  RunReport(RepSpec,0);
  return;
end;

global
function Boolean SDDClassOnOpenWindow(Integer wn)
begin
  record SDVc SDr;
  Integer AcceptanceStatusFlag;
  
  GetWindowRecord(wn,SDr);
  SDDClassOnOpenWindowRemote(SDr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  SDDClassOnOpenWindow = false;
  return;
end;

global
procedure SDDClassOnWindowRecordChange(Integer wn)
begin
  record SDVc SDr;
  Integer AcceptanceStatusFlag;

  GetWindowRecord(wn,SDr);
  SDDClassOnOpenWindowRemote(SDr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  return;
end;