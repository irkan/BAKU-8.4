external procedure RecompileHALMn();
external procedure MySortStringArray(var array string,integer);
//server-only
global procedure DeadItemsRn(record RcVc RepSpec)
begin
	record ItemHistVc IHr;
	record INVc INr,kkINr;
	record BPIBrandVc BPIBrandr;
	record ItemStatusVc ISr;
	record IVVc IVr;
	record SHVc SHr;
	vector val salesbystock,instockbystock,lastday;
	boolean testf,TrHs,testf1,INTrHs,firstout;
	array string 100 salestags,stocktags,adeaditems;
	integer i,j,acnt;
	record ItemDuplicatesVc IDr;
	vector integer vdeaditems,vdeaditemsstock;
	vector boolean exitemincomp;
	string 30 itemcode;
	record CompaniesBlock CBb;
	row CompaniesBlock CBrw;
	record ConsItemVc CIr;
	record LocationVc Locr;
	
	startreportnoheaderjob("Dead Stock Report");
	
	setcompany(1,false);
	
	weboutstring("Brand " & RepSpec.f1);
	weboutstring("From-to " & RepSpec.sStartDate & "-" & RepSpec.sEndDate);
	weboutstring("<BR>");
	
	blockload(CBb);
	if(nonblank(RepSpec.f1))then begin
		BPIBrandr.Code = RepSpec.f1;
		if(readfirstmain(BPIBrandr,1,true))then begin
			for(j=0;j<matrowcnt(CBb);j=j+1)begin
				matrowget(CBb,j,CBrw);
				if(CBrw.ActiveStatus==0)then begin
					SetCompany(j+1,false);
					//logtext(0,"DeadItemsRn SetCompany " & j+1);
					INr.Code = "";
					resetloop(INr);
					INTrHs = true;
					if(nonblank(RepSpec.f2))then begin
						INr.Code = RepSpec.f2;
					end;
					while(loopmain(INr,1,INTrHs))begin
						if(nonblank(RepSpec.f2) and INr.Code!=RepSpec.f2)then begin
							INTrHs = false;
						end;
						itemcode = INr.Code;
						IDr.DupCode = INr.Code;
						readfirstkey("DupCode",IDr,1,true);
						if(nonblank(IDr.OrigCode))then begin
							itemcode = IDr.OrigCode;
						end;
						if(currentcompany==18)then begin
							kkINr.Code = itemcode;
							if(readfirstmain(kkINr,1,true))then begin
								if(nonblank(kkINr.AlternativeCode))then begin
									itemcode = kkINr.AlternativeCode;
								end;
							end;
						end;
						testf = true;
						if(INr.BPIBrand!=BPIBrandr.Code)then begin testf = false; end;
						if(INr.ConsgType!=0 and INr.ConsgType!=1)then begin testf = false; end;
						
						
						if(testf)then begin
							ClearVector(salesbystock);
							ClearVector(instockbystock);
							ClearVector(lastday);
							ISr.Code = INr.Code;
							TrHs = true;
							while(loopmain(ISr,1,TrHs))begin
								if(ISr.Code!=INr.Code)then begin TrHs = false; end;
								if(TrHs and ISr.Location!=";;;")then begin
									instockbystock[ISr.Location] = ISr.Instock;
									lastday[IHr.Location] = ISr.Instock;
								end;
							end;
							resetloop(ISr);
							IHr.ArtCode = INr.Code;
							IHr.TransDate = currentdate;
							TrHs = true;
							while(loopbackkey("ArtCode",IHr,2,TrHs))begin
								testf1 = true;
								if(IHr.TransDate<RepSpec.sStartDate)then begin TrHs = false; testf1 = false; end;
								if(IHr.ArtCode!=INr.Code)then begin TrHs = false; testf1 = false; end;
								if(IHr.StockAffectf==0)then begin testf1 = false; end;
								if(IHr.Location==";;;")then begin testf1 = false; end;
						
								if(testf1)then begin
									//logtext(0,"instockbystock " & instockbystock[IHr.Location] & " location " & IHr.Location & " -Qty " & IHr.Qty & " for artcode " & IHr.ArtCode & " to date " & IHr.TransDate);
									instockbystock[IHr.Location] = instockbystock[IHr.Location] - IHr.Qty;
									if(IHr.TransDate>RepSpec.sEndDate)then begin
										lastday[IHr.Location] = lastday[IHr.Location] - IHr.Qty;
									end;
									if(dateinrange(IHr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate))then begin
										if(IHr.FileName=="IVVc")then begin
											IVr.SerNr = IHr.TransNr;
											if(readfirstmain(IVr,1,true))then begin
												if(IVr.Invalid==0)then begin
													if(left(IVr.CustCode,3)!="FOB")then begin
														salesbystock[IHr.Location] = salesbystock[IHr.Location] - IHr.Qty;
													end;
												end;
											end;
										end;
										if(IHr.FileName=="SHVc")then begin
											SHr.SerNr = IHr.TransNr;
											if(readfirstmain(SHr,1,true))then begin
												if(left(SHr.CustCode,3)!="FOB")then begin
													salesbystock[IHr.Location] = salesbystock[IHr.Location] - IHr.Qty;
												end;
											end;
										end;
									end;
							
								end;
							end;
							resetloop(IHr);
					
							getvectortags(instockbystock,stocktags);
							getvectortags(salesbystock,salestags);
							if(stocktags.length>0)then begin
								exitemincomp[itemcode & ":" & currentcompany] = true;
								for(i=0;i<stocktags.length;i=i+1)begin
									if(instockbystock[stocktags[i]]!=0)then begin
										if(salesbystock[stocktags[i]]!=0)then begin
											vdeaditems[itemcode] = 2;									
										end;
										if(salesbystock[stocktags[i]]==0)then begin
											if(vdeaditems[itemcode]!=2)then begin
												vdeaditems[itemcode] = 1;
												vdeaditemsstock[itemcode & ":" & currentcompany] = vdeaditemsstock[itemcode & ":" & currentcompany] + lastday[stocktags[i]];
											end;
										end;
									end;
								end;
							end;
						end;
					end;
				end;
			end;
			
			
			GetVectorTags(vdeaditems,adeaditems);
			acnt = adeaditems.length;
			MySortStringArray(adeaditems,acnt);
			
			firstout = false;
			
			weboutstring("<tr>");
			weboutstring("<td>Item Code</td>");
			weboutstring("<td>Name</td>");
			weboutstring("<td>Brand</td>");
			for(j=0;j<matrowcnt(CBb);j=j+1)begin
						matrowget(CBb,j,CBrw);
						if(CBrw.ActiveStatus==0)then begin
							weboutstring("<td>" & CBrw.CompName & "</td>");
						end;
			end;
			weboutstring("</tr>");
			
			for(i=0;i<acnt;i=i+1)begin
				if(vdeaditems[adeaditems[i]]==1)then begin
					//weboutstring(adeaditems[i]);
					//weboutstring("<BR>");
					weboutstring("<tr>");
					for(j=0;j<matrowcnt(CBb);j=j+1)begin
						matrowget(CBb,j,CBrw);
						if(CBrw.ActiveStatus==0)then begin
							if(exitemincomp[adeaditems[i] & ":" & j+1])then begin
								
								if(firstout==false)then begin
									SetCompany(j+1,false);
									INr.Code = adeaditems[i];
									if(readfirstmain(INr,1,true))then begin
										weboutstring("<td>" & INr.Code & "</td>");
										weboutstring("<td>" & INr.Name & "</td>");
										weboutstring("<td>" & BPIBrandr.Name & "</td>");
									end else begin
										weboutstring("<td>" & adeaditems[i] & "</td>");
										weboutstring("<td></td>");
										weboutstring("<td></td>");
									end;
									firstout = true;
								end;
							end;
						end;
					end;	
					for(j=0;j<matrowcnt(CBb);j=j+1)begin
						matrowget(CBb,j,CBrw);
						if(CBrw.ActiveStatus==0)then begin
							if(exitemincomp[adeaditems[i] & ":" & j+1])then begin
								weboutstring("<td>" & vdeaditemsstock[adeaditems[i] & ":" & j+1] & "</td>");
							end else begin
								weboutstring("<td></td>");
							end;
						end;
					end;
					
					
					weboutstring("</tr>");				
				end;
			end;
			
			/*for(j=0;j<matrowcnt(CBb);j=j+1)begin
				matrowget(CBb,j+1,CBrw);
				if(CBrw.ActiveStatus==0)then begin
					SetCompany(j+1,false);
					firstout = false;
					
					for(i=0;i<acnt;i=i+1)begin
						if(vdeaditems[adeaditems[i]]==1)then begin
							
							
							
							//DIr.OrigCode = adeaditems[i];
							//if(readfirst)then begin
							
							//end;
							INr.Code = adeaditems[i];
							if(readfirstmain(INr,1,true))then begin
								if(firstout==false)then begin
									weboutstring(CBrw.CompName);
									weboutstring("<BR>");
									firstout = true;
								end;
								weboutstring(adeaditems[i]);
								weboutstring("<BR>");
							end;
						end;
					end;
				end;
			end;*/
			
		end;
	end;
	
	
	endjob;

return;
end;


global webpublic procedure WebDeadItemsRn()
begin
	string 20 brand,sd,ed,item;
	record RcVc RepSpec;
	
	
	brand = WebGetArg("brand");
	sd = WebGetArg("sd");
	ed = WebGetArg("ed");
	item =  WebGetArg("item");
	
	RepSpec.f1 = brand;
	RepSpec.f2 = item;
	RepSpec.sStartDate = stringtodate(sd);
	RepSpec.sEndDate = stringtodate(ed);
	
	DeadItemsRn(RepSpec);
	
return;
end;

global webpublic procedure WebRecompile()
begin
	setcompany(1,false);	
	
	RecompileHALMn;
	
return;
end;

