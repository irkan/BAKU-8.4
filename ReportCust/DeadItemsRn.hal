external procedure RecompileHALMn();
external procedure MySortStringArray(var array string,integer);
external  function string 100 BPICodeToName(string);


//server-only
global procedure DeadItemsRn(record RcVc RepSpec)
begin
	record ItemHistVc IHr;
	record INVc INr,kkINr;
	record BPIBrandVc BPIBrandr;
	record ItemStatusVc ISr;
	record IVVc IVr;
	record SHVc SHr;
	vector val salesbystock,instockbystock,lastday;
	boolean testf,TrHs,testf1,INTrHs,firstout;
	array string 100 salestags,stocktags,adeaditems;
	integer i,j,acnt;
	record ItemDuplicatesVc IDr;
	vector integer vdeaditems,vdeaditemsstock;
	vector boolean exitemincomp,compexists;
	string 30 itemcode;
	record CompaniesBlock CBb;
	row CompaniesBlock CBrw;
	record ConsItemVc CIr;
	record LocationVc Locr;
	integer curcom;
	
	startreportnoheaderjob("Dead Stock Report");
	
	curcom = currentcompany;
	
	setcompany(1,false);
	
	StartFormat(15);
		outstring(0,0,"Brand " & RepSpec.f1,false);
		outstring(100,0,"From-to " & RepSpec.sStartDate & "-" & RepSpec.sEndDate,false);
	endformat;
	
	weboutstring("Brand " & RepSpec.f1);
	weboutstring("From-to " & RepSpec.sStartDate & "-" & RepSpec.sEndDate);
	weboutstring("<BR>");
	
	blockload(CBb);
	
	logtext(0,"RepSpec.f1 " & RepSpec.f1);
	if(nonblank(RepSpec.f1))then begin
		BPIBrandr.Code = RepSpec.f1;
		if(readfirstmain(BPIBrandr,1,true))then begin
			logtext(0,"BPIBrandr.Code " & BPIBrandr.Code);
			for(j=0;j<matrowcnt(CBb);j=j+1)begin
				matrowget(CBb,j,CBrw);
				if(CBrw.ActiveStatus==0 and CBrw.CompName!="Outlet")then begin
					SetCompany(j+1,false);
					logtext(0,"DeadItemsRn SetCompany " & j+1);
					INr.Code = "";
					resetloop(INr);
					INTrHs = true;
					while(loopmain(INr,1,INTrHs))begin
						itemcode = INr.Code;
						IDr.DupCode = INr.Code;
						readfirstkey("DupCode",IDr,1,true);
						if(nonblank(IDr.OrigCode))then begin
							itemcode = IDr.OrigCode;
						end;
						if(currentcompany==18)then begin
							kkINr.Code = itemcode;
							if(readfirstmain(kkINr,1,true))then begin
								if(nonblank(kkINr.AlternativeCode))then begin
									itemcode = kkINr.AlternativeCode;
								end;
							end;
							
							if(left(itemcode,3)=="IN_")then begin
								CIr.Code = itemcode;
								if(readfirstmain(CIr,1,true))then begin
									itemcode = CIr.LocCode;
								end;
							end;
							
						end;
						testf = true;
						if(INr.BPIBrand!=BPIBrandr.Code)then begin testf = false; end;
						if(INr.ConsgType!=0 and INr.ConsgType!=1)then begin testf = false; end;
						if(itemcode!=RepSpec.f2 and nonblank(RepSpec.f2))then begin testf = false; end;
						
						
						if(testf)then begin
							logtext(0,"INr.Code " & INr.Code);
							ClearVector(salesbystock);
							ClearVector(instockbystock);
							ClearVector(lastday);
							ISr.Code = INr.Code;
							TrHs = true;
							while(loopmain(ISr,1,TrHs))begin
								if(ISr.Code!=INr.Code)then begin TrHs = false; end;
								if(TrHs and ISr.Location!=";;;")then begin
									instockbystock[ISr.Location] = ISr.Instock;
									lastday[ISr.Location] = ISr.Instock;
								end;
							end;
							resetloop(ISr);
							IHr.ArtCode = INr.Code;
							IHr.TransDate = currentdate;
							TrHs = true;
							while(loopbackkey("ArtCode",IHr,2,TrHs))begin
								testf1 = true;
								if(IHr.TransDate<RepSpec.sStartDate)then begin TrHs = false; testf1 = false; end;
								if(IHr.ArtCode!=INr.Code)then begin TrHs = false; testf1 = false; end;
								if(IHr.StockAffectf==0)then begin testf1 = false; end;
								if(IHr.Location==";;;")then begin testf1 = false; end;
						
								if(testf1)then begin
									if(nonblank(RepSpec.f2))then begin
										logtext(0,"instockbystock " & instockbystock[IHr.Location] & " location " & IHr.Location & " -Qty " & IHr.Qty & " for artcode " & IHr.ArtCode & " to date " & IHr.TransDate);
									end;
									instockbystock[IHr.Location] = instockbystock[IHr.Location] - IHr.Qty;
									if(IHr.TransDate>RepSpec.sEndDate)then begin
										lastday[IHr.Location] = lastday[IHr.Location] - IHr.Qty;
									end;
									if(dateinrange(IHr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate))then begin
										if(IHr.FileName=="IVVc" and IHr.Qty<0)then begin
											IVr.SerNr = IHr.TransNr;
											if(readfirstmain(IVr,1,true))then begin
												if(IVr.Invalid==0)then begin
													if(left(IVr.CustCode,3)!="FOB")then begin
														salesbystock[IHr.Location] = salesbystock[IHr.Location] - IHr.Qty;
													end;
												end;
											end;
										end;
										if(IHr.FileName=="SHVc")then begin
											SHr.SerNr = IHr.TransNr;
											if(readfirstmain(SHr,1,true))then begin
												if(left(SHr.CustCode,3)!="FOB")then begin
													salesbystock[IHr.Location] = salesbystock[IHr.Location] - IHr.Qty;
												end;
											end;
										end;
									end;
							
								end;
							end;
							resetloop(IHr);
					
							getvectortags(instockbystock,stocktags);
							getvectortags(salesbystock,salestags);
							if(stocktags.length>0)then begin
								exitemincomp[itemcode & ":" & currentcompany] = true;
								compexists[currentcompany] = true;
								for(i=0;i<stocktags.length;i=i+1)begin
									if(instockbystock[stocktags[i]]!=0 and lastday[stocktags[i]]!=0)then begin
										if(salesbystock[stocktags[i]]!=0)then begin
											vdeaditems[itemcode] = 2;	
											vdeaditemsstock[itemcode & ":" & currentcompany] = vdeaditemsstock[itemcode & ":" & currentcompany] + lastday[stocktags[i]];								
										end;
										if(salesbystock[stocktags[i]]==0)then begin
											if(vdeaditems[itemcode]!=2)then begin
												vdeaditems[itemcode] = 1;
												vdeaditemsstock[itemcode & ":" & currentcompany] = vdeaditemsstock[itemcode & ":" & currentcompany] + lastday[stocktags[i]];
												if(nonblank(RepSpec.f2))then begin
													logtext(0,"vdeaditemsstock " & itemcode & ":" & currentcompany & " + " & lastday[stocktags[i]]);
												end;
											end;
										end;
									end;
								end;
							end;
						end;
					end;
				end;
			end;
			
			
			GetVectorTags(vdeaditems,adeaditems);
			acnt = adeaditems.length;
			MySortStringArray(adeaditems,acnt);
			
			StartFormat(15);
				outstring(0,0,"Item Code",false);
				outstring(0,0,"Name",false);
				outstring(0,0,"Brand",false);
				outstring(0,0,"Group",false);
				outstring(0,0,"SubGr.",false);
				outstring(0,0,"Categ.",false);
				outstring(0,0,"Mat.",false);
				outstring(0,0,"Col.",false);
				outstring(0,0,"Shape",false);
				outstring(0,0,"Size",false);
				outstring(0,0,"Use",false);
				outstring(0,0,"Sex",false);
				outstring(0,0,"Plat.",false);
				outstring(0,0,"Clar.",false);
				outstring(0,0,"Wght",false);
				outstring(0,0,"Cut",false);
				outstring(0,0,"Stone",false);
				outstring(0,0,"Strap",false);
				outstring(0,0,"Odour",false);
				outstring(0,0,"CC Collection",false);
				outstring(0,0,"Product Group",false);
			
			weboutstring("<table>");
			weboutstring("<tr>");
			weboutstring("<td>Item Code</td>");
			weboutstring("<td>Name</td>");
			weboutstring("<td>Brand</td>");
			
			weboutstring("<td>Group</td>");
			weboutstring("<td>SubGr.</td>");
			weboutstring("<td>Categ.</td>");
			weboutstring("<td>Mat.</td>");
			weboutstring("<td>Col.</td>");
			weboutstring("<td>Shape</td>");
			weboutstring("<td>Size</td>");
			weboutstring("<td>Use</td>");
			weboutstring("<td>Sex</td>");
			weboutstring("<td>Plat.</td>");
			weboutstring("<td>Clar.</td>");
			weboutstring("<td>Wght</td>");
			weboutstring("<td>Cut</td>");
			weboutstring("<td>Stone</td>");
			weboutstring("<td>Strap</td>");
			weboutstring("<td>Odour</td>");
			weboutstring("<td>CC Collection</td>");
			weboutstring("<td>Product Group</td>");
			
			
			for(j=0;j<matrowcnt(CBb);j=j+1)begin
						matrowget(CBb,j,CBrw);
						if(CBrw.ActiveStatus==0 and CBrw.CompName!="Outlet")then begin
							if(compexists[j+1])then begin
								weboutstring("<td>" & CBrw.CompName & "</td>");
								outstring(0,0,CBrw.CompName,false);
							end;
						end;
			end;
			weboutstring("</tr>");
			endformat;
			
			for(i=0;i<acnt;i=i+1)begin
				if(vdeaditems[adeaditems[i]]==1)then begin
					//weboutstring(adeaditems[i]);
					//weboutstring("<BR>");
					firstout = false;
					weboutstring("<tr>");
					startformat(15);
					for(j=0;j<matrowcnt(CBb);j=j+1)begin
						matrowget(CBb,j,CBrw);
						if(CBrw.ActiveStatus==0 and CBrw.CompName!="Outlet")then begin
							if(exitemincomp[adeaditems[i] & ":" & j+1])then begin
								
								if(firstout==false)then begin
									SetCompany(j+1,false);
									INr.Code = adeaditems[i];
									if(currentcompany==18)then begin
										CIr.LocCode = adeaditems[i];
										CIr.BrandCode = BPIBrandr.Code;
										if(readfirstkey("LocCodeBrand",CIr,2,true))then begin
											INr.Code = CIr.Code;
										end;
									end;
									
									if(readfirstmain(INr,1,true))then begin
										firstout = true;
										
										outstring(0,0,adeaditems[i],false);
										outstring(0,0,INr.Name,false);
										outstring(0,0,BPIBrandr.Name,false);										
										outstring(0,0,BPICodeToName(INr.BPIGroup),false);
										outstring(0,0,BPICodeToName(INr.BPISubGroup),false);
										outstring(0,0,BPICodeToName(INr.BPICategory),false);
										outstring(0,0,BPICodeToName(INr.BPIMaterial),false);
										outstring(0,0,BPICodeToName(INr.BPIColor),false);
										outstring(0,0,BPICodeToName(INr.BPIShape),false);
										outstring(0,0,BPICodeToName(INr.BPISize),false);
										outstring(0,0,BPICodeToName(INr.BPIUse),false);
										outstring(0,0,BPICodeToName(INr.BPISex),false);
										outstring(0,0,BPICodeToName(INr.BPIPlating),false);
										outstring(0,0,BPICodeToName(INr.BPIClarity),false);
										outstring(0,0,BPICodeToName(INr.BPIWeight),false);
										outstring(0,0,BPICodeToName(INr.BPICut),false);
										outstring(0,0,BPICodeToName(INr.BPIStone),false);
										outstring(0,0,BPICodeToName(INr.BPIStrap),false);
										outstring(0,0,BPICodeToName(INr.BPIOdour),false);
										outstring(0,0,INr.MainDisp,false);
										outstring(0,0,INr.SNOne,false);
										
										weboutstring("<td>" & adeaditems[i] & "</td>");
										weboutstring("<td>" & INr.Name & "</td>");
										weboutstring("<td>" & BPIBrandr.Name & "</td>");										
										weboutstring("<td>" & BPICodeToName(INr.BPIGroup) & "</td>");
										weboutstring("<td>" & BPICodeToName(INr.BPISubGroup) & "</td>");
										weboutstring("<td>" & BPICodeToName(INr.BPICategory) & "</td>");
										weboutstring("<td>" & BPICodeToName(INr.BPIMaterial) & "</td>");
										weboutstring("<td>" & BPICodeToName(INr.BPIColor) & "</td>");
										weboutstring("<td>" & BPICodeToName(INr.BPIShape) & "</td>");
										weboutstring("<td>" & BPICodeToName(INr.BPISize) & "</td>");
										weboutstring("<td>" & BPICodeToName(INr.BPIUse) & "</td>");
										weboutstring("<td>" & BPICodeToName(INr.BPISex) & "</td>");
										weboutstring("<td>" & BPICodeToName(INr.BPIPlating) & "</td>");
										weboutstring("<td>" & BPICodeToName(INr.BPIClarity) & "</td>");
										weboutstring("<td>" & BPICodeToName(INr.BPIWeight) & "</td>");
										weboutstring("<td>" & BPICodeToName(INr.BPICut) & "</td>");
										weboutstring("<td>" & BPICodeToName(INr.BPIStone) & "</td>");
										weboutstring("<td>" & BPICodeToName(INr.BPIStrap) & "</td>");
										weboutstring("<td>" & BPICodeToName(INr.BPIOdour) & "</td>");
										weboutstring("<td>" & INr.MainDisp & "</td>");
										weboutstring("<td>" & INr.SNOne & "</td>");
										
									end;
								end;
							end;
						end;
					end;	
					
					if(firstout==false)then begin
						weboutstring("<td>" & adeaditems[i] & "</td>");
						weboutstring("<td></td>");
						weboutstring("<td></td>");
						outstring(0,0,adeaditems[i],false);
						outstring(0,0,"",false);
						outstring(0,0,"",false);
					end;		
					
					for(j=0;j<matrowcnt(CBb);j=j+1)begin
						matrowget(CBb,j,CBrw);
						if(CBrw.ActiveStatus==0 and compexists[j+1] and CBrw.CompName!="Outlet")then begin
							if(exitemincomp[adeaditems[i] & ":" & j+1])then begin
								weboutstring("<td>" & vdeaditemsstock[adeaditems[i] & ":" & j+1] & "</td>");
								outstring(0,0,vdeaditemsstock[adeaditems[i] & ":" & j+1],false);
							end else begin
								weboutstring("<td></td>");
								outstring(0,0,"",false);
							end;
						end;
					end;			
					endformat;		
					weboutstring("</tr>");				
				end;
			end;
			weboutstring("</table>");			
		end;
	end;
	
	
	endjob;
	
	setcompany(curcom,false);

return;
end;


global webpublic procedure WebDeadItemsRn()
begin
	string 20 brand,sd,ed,item;
	record RcVc RepSpec;
	
	
	brand = WebGetArg("brand");
	sd = WebGetArg("sd");
	ed = WebGetArg("ed");
	item =  WebGetArg("item");
	
	RepSpec.f1 = brand;
	RepSpec.f2 = item;
	RepSpec.sStartDate = stringtodate(sd);
	RepSpec.sEndDate = stringtodate(ed);
	
	DeadItemsRn(RepSpec);
	
return;
end;

global webpublic procedure WebRecompile()
begin
	setcompany(1,false);	
	
	RecompileHALMn;
	
return;
end;

