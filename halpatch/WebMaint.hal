external function longint DateDiff(date,date);
remote function boolean CompanyIsJWLikeCompany(Integer);
external procedure YcToStr(Integer,var string);
external updating function LongInt TRVcRecordRemove(var record TRVc,record TRVc,LongInt,LongInt);
external function val AbsoluteVal(val);
external procedure RetPUSumUp(var record RetPUVc);
remote procedure ORSumup(var record ORVc);
remote procedure ORVc_PastePrice(var record ORVc,Integer,var Boolean);
remote procedure ORDchsum(var record ORVc,Integer);
external procedure PUVc_PasteCostPrice(var record PUVc,Integer);
remote procedure TRVc_PasteCurCredVal(var record TRVc,Integer);
remote procedure TRVc_PasteCurDebVal(var record TRVc,Integer);
remote procedure TRVc_PasteDebVal(var record TRVc,Integer);
remote procedure TRVc_PasteCredVal(var record TRVc,Integer);
external function Integer MakeTransFromPU(record TRVc,record PUVc,record LocationVc,Boolean);
external updating procedure SaveTrans(record TRVc);
external updating procedure AddTTrans_PUVc(record TRVc,record PUVc);
external updating procedure DeleteTransaction(LongInt,Integer);
external updating procedure AddTTrans_IVVc(record TRVc,record IVVc);
external function Integer MakeTransFromIV(var record TRVc,var record SMVc,record IVVc,Boolean,Boolean,record IVVc);


global webpublic updating procedure WebFindAndFixItems()
begin
	record RHistVc RHr;
	boolean TrHs,testf;
	vector integer vrstr;
  array string 20 keys;
  integer i,j,counter,lastj;
  string 10 c;
  string 50 recname,compnr,mainkey;
  integer cter,pref,check;
  longint kkk;
  area workarea;
  record INVc INr,OrigINr;
  vector string 100 brandbnames;
  record BPIBrandVc BPIBrandr;
  
  setcompany(1,false);
  
  while(loopmain(BPIBrandr,1,true))begin
  	brandbnames[BPIBrandr.Code] = BPIBrandr.Name;
  end;
  
  kkk = 1;
	RHr.TransDate = stringtodate("12/02/2020");
	RHr.User = "IRKAKH";
	
	TrHs = true;
	while(loopkey("UserDateTime",RHr,2,TrHs))begin
		testf = true;
		if(RHr.TransDate!=stringtodate("12/02/2020"))then begin TrHs = false; end;
		if(RHr.User!="IRKAKH")then begin TrHs = false; end;
		
		
		
		if(testf)then begin
			testf = TrHs;
		end;
		
		if(testf)then begin
			setareazerosize(workarea);
			addtexttoarea(RHr.RecidStr,workarea);
			c = getstringfromarea(workarea,0,1);//left(RHr.RecidStr,1);
			pref = asc(c) + 1;
			compnr = getstringfromarea(workarea,1,asc(c));//mid(RHr.RecidStr,1,asc(c));
			recname = "";
			mainkey = "";
			cter = 0;
			lastj = 0;
			if(pref<getarealength(workarea))then begin
				for(j=pref;j<getarealength(workarea);j=j+1)begin
					c = getstringfromarea(workarea,j,1);//mid(RHr.RecidStr,j,1);
					if(asc(c)<48)then begin
						j = getarealength(workarea);
					end else begin
						recname = recname & c;
						lastj = j;
					end;
				end;
				
				for(j=lastj;j<getarealength(workarea);j=j+1)begin
					c = getstringfromarea(workarea,j,1);//mid(RHr.RecidStr,j,1);
					if(asc(c)<48)then begin
						if((j+1)<getarealength(workarea))then begin
							mainkey = getstringfromarea(workarea,j+1,getarealength(workarea)-(j+1));
							if(asc(left(mainkey,1))<48)then begin
								mainkey = right(mainkey,len(mainkey)-1);
							end;
						end;
						j = getarealength(workarea);
					end else begin
					end;
				end;
			end else begin
			end;
			
		end;
		
		if(testf)then begin
			if(recname=="INVc")then begin
				//weboutstring(kkk & " compnr " & compnr & "_____record " & recname & " mainkey " & mainkey);
				weboutstring("<BR>");
				kkk = kkk + 1;
				setcompany(stringtoint(compnr),false);
					INr.Code = mainkey;
					if(readfirstmain(INr,1,true))then begin
						ReadOriginalRecord(RHr,OrigINr);	
						if(blank(INr.BPIBrand) and nonblank(OrigINr.BPIBrand))then begin
							weboutstring(compnr & " Restore brand " & brandbnames[OrigINr.BPIBrand] & " for item " & INr.Code);
							INr.BPIBrand = OrigINr.BPIBrand;
							INr.BPICollection = OrigINr.BPICollection;
							INr.BPIGroup = OrigINr.BPIGroup;
							INr.BPISubGroup = OrigINr.BPISubGroup;
							INr.BPICategory = OrigINr.BPICategory;
							INr.BPIMaterial = OrigINr.BPIMaterial;
							INr.BPIColor = OrigINr.BPIColor;
							INr.BPIShape = OrigINr.BPIShape;
							INr.BPISize = OrigINr.BPISize;
							INr.BPIUse = OrigINr.BPIUse;
							INr.BPISex = OrigINr.BPISex;
							INr.BPIPlating = OrigINr.BPIPlating;
							INr.BPIClarity = OrigINr.BPIClarity;
							INr.BPIWeight = OrigINr.BPIWeight;
							INr.BPICut = OrigINr.BPICut;
							INr.BPIStone = OrigINr.BPIStone;
							INr.BPIStrap = OrigINr.BPIStrap;
							INr.BPIOdour = OrigINr.BPIOdour;
							recordstore(INr,true);
						end;
					end;
				resetcompany(1);
			end;
			//logtext(0,"compnr " & compnr & "_____record " & recname & " mainkey " & mainkey);
		end;
		
	end;
	
return;
end;

global webpublic updating procedure WebRestoreCustomNames()
begin
	record RHistVc RHr;
	boolean TrHs,testf;
	vector integer vrstr;
  array string 20 keys;
  integer i,j,counter,lastj;
  string 10 c;
  string 50 recname,compnr,mainkey;
  integer cter,pref,check;
  longint kkk;
  area workarea;
  record INVc INr,OrigINr;
  record CUVc CUr,OrigCUr;
  vector string 100 brandbnames;
  
	setcompany(1,false);
  
  
  kkk = 1;
	//RHr.TransDate = stringtodate("04/03/2020");
	//RHr.User = "CRMSYST";
	
	RHr.SerNr = 9999999999;
	
	TrHs = true;
	while(loopbackkey("MainKey",RHr,1,TrHs))begin
		testf = true;
		if(RHr.TransDate<stringtodate("04/03/2020"))then begin TrHs = false; end;
		//if(RHr.User!="CRMSYST")then begin TrHs = false; end;
		
		logtext(0,RHr.SerNr & " " & RHr.TransDate);
		
		if(testf)then begin
			testf = TrHs;
		end;
		
		if(fileexists("stop"))then begin
			TrHs = false;
		end;
		
		if(testf)then begin
			setareazerosize(workarea);
			addtexttoarea(RHr.RecidStr,workarea);
			c = getstringfromarea(workarea,0,1);//left(RHr.RecidStr,1);
			pref = asc(c) + 1;
			compnr = getstringfromarea(workarea,1,asc(c));//mid(RHr.RecidStr,1,asc(c));
			recname = "";
			mainkey = "";
			cter = 0;
			lastj = 0;
			if(pref<getarealength(workarea))then begin
				for(j=pref;j<getarealength(workarea);j=j+1)begin
					c = getstringfromarea(workarea,j,1);//mid(RHr.RecidStr,j,1);
					if(asc(c)<48)then begin
						j = getarealength(workarea);
					end else begin
						recname = recname & c;
						lastj = j;
					end;
				end;
				
				for(j=lastj;j<getarealength(workarea);j=j+1)begin
					c = getstringfromarea(workarea,j,1);//mid(RHr.RecidStr,j,1);
					if(asc(c)<48)then begin
						if((j+1)<getarealength(workarea))then begin
							mainkey = getstringfromarea(workarea,j+1,getarealength(workarea)-(j+1));
							if(asc(left(mainkey,1))<48)then begin
								mainkey = right(mainkey,len(mainkey)-1);
							end;
						end;
						j = getarealength(workarea);
					end else begin
					end;
				end;
			end else begin
			end;
			
		end;
		
		if(testf)then begin
			if(recname=="CUVc")then begin
				logtext(0,mainkey);
				//weboutstring(kkk & " compnr " & compnr & "_____record " & recname & " mainkey " & mainkey);
				//weboutstring("<BR>");
				kkk = kkk + 1;
					CUr.Code = mainkey;
					if(readfirstmain(CUr,1,true))then begin
						if(blank(CUr.Name))then begin
							ReadOriginalRecord(RHr,OrigCUr);	
							if(CUr.Name!=OrigCUr.Name and nonblank(OrigCUr.Name))then begin
								weboutstring(compnr & " Restore name " & CUr.Code & " for customer " & OrigCUr.Name);
								weboutstring("<BR>");
								CUr.Name = OrigCUr.Name;
								recordstore(CUr,true);
							end;
						end;
					end;
			end;
			//logtext(0,"compnr " & compnr & "_____record " & recname & " mainkey " & mainkey);
		end;
		
	end;
	
return;
end;



global webpublic updating procedure WebRestoreCustomNamesCUr()
begin
	record RHistVc RHr;
	boolean TrHs,testf;
	vector integer vrstr;
  array string 20 keys;
  integer i,j,counter,lastj;
  string 10 c;
  string 50 recname,compnr,mainkey;
  integer cter,pref,check;
  longint kkk;
  area workarea;
  record INVc INr,OrigINr;
  record CUVc CUr,OrigCUr;
  vector string 100 brandbnames;
  string 255 tstr;
  
	setcompany(1,false);
  
  
  kkk = 1;
	//RHr.TransDate = stringtodate("04/03/2020");
	//RHr.User = "CRMSYST";
	
	RHr.SerNr = 9999999999;
	
	TrHs = true;
	CUr.Name = "";
	while(loopkey("Name",CUr,1,TrHs))begin
		if(nonblank(CUr.Name))then begin TrHs = false; end;
		
		if(TrHs)then begin
			tstr = BuildRecordIdStr(CUr,1);
			
			RHr.RecidStr = tstr;
			if(readlastkey("RecidStr",RHr,1,true))then begin
				ReadOriginalRecord(RHr,OrigCUr);	
				if(CUr.Name!=OrigCUr.Name and nonblank(OrigCUr.Name))then begin
					weboutstring(compnr & " Restore name " & CUr.Code & " for customer " & OrigCUr.Name);
					weboutstring("<BR>");
					CUr.Name = OrigCUr.Name;
					recordstore(CUr,true);
				end;
			
			end;						
			
		end;
		
	end;
	
	/*
	TrHs = true;
	while(loopbackkey("MainKey",RHr,1,TrHs))begin
		testf = true;
		if(RHr.TransDate<stringtodate("04/03/2020"))then begin TrHs = false; end;
		//if(RHr.User!="CRMSYST")then begin TrHs = false; end;
		
		logtext(0,RHr.SerNr & " " & RHr.TransDate);
		
		if(testf)then begin
			testf = TrHs;
		end;
		
		if(fileexists("stop"))then begin
			TrHs = false;
		end;
		
		if(testf)then begin
			setareazerosize(workarea);
			addtexttoarea(RHr.RecidStr,workarea);
			c = getstringfromarea(workarea,0,1);//left(RHr.RecidStr,1);
			pref = asc(c) + 1;
			compnr = getstringfromarea(workarea,1,asc(c));//mid(RHr.RecidStr,1,asc(c));
			recname = "";
			mainkey = "";
			cter = 0;
			lastj = 0;
			if(pref<getarealength(workarea))then begin
				for(j=pref;j<getarealength(workarea);j=j+1)begin
					c = getstringfromarea(workarea,j,1);//mid(RHr.RecidStr,j,1);
					if(asc(c)<48)then begin
						j = getarealength(workarea);
					end else begin
						recname = recname & c;
						lastj = j;
					end;
				end;
				
				for(j=lastj;j<getarealength(workarea);j=j+1)begin
					c = getstringfromarea(workarea,j,1);//mid(RHr.RecidStr,j,1);
					if(asc(c)<48)then begin
						if((j+1)<getarealength(workarea))then begin
							mainkey = getstringfromarea(workarea,j+1,getarealength(workarea)-(j+1));
							if(asc(left(mainkey,1))<48)then begin
								mainkey = right(mainkey,len(mainkey)-1);
							end;
						end;
						j = getarealength(workarea);
					end else begin
					end;
				end;
			end else begin
			end;
			
		end;
		
		if(testf)then begin
			if(recname=="CUVc")then begin
				logtext(0,mainkey);
				//weboutstring(kkk & " compnr " & compnr & "_____record " & recname & " mainkey " & mainkey);
				//weboutstring("<BR>");
				kkk = kkk + 1;
					CUr.Code = mainkey;
					if(readfirstmain(CUr,1,true))then begin
						if(blank(CUr.Name))then begin
							ReadOriginalRecord(RHr,OrigCUr);	
							if(CUr.Name!=OrigCUr.Name and nonblank(OrigCUr.Name))then begin
								weboutstring(compnr & " Restore name " & CUr.Code & " for customer " & OrigCUr.Name);
								weboutstring("<BR>");
								CUr.Name = OrigCUr.Name;
								recordstore(CUr,true);
							end;
						end;
					end;
			end;
			//logtext(0,"compnr " & compnr & "_____record " & recname & " mainkey " & mainkey);
		end;
		
	end;*/
	
return;
end;



global webpublic procedure WebCheckListToClose()
begin
	area ainput,aoutput;
	longint lines,i,j;
	string 255 linestr;
	array string 50 contacts;
	vector boolean isVendor,isEmpl,hasLC,hasActiv,isClosed,isIDEA;
	record CUVc CUr;
	record LoyaltyCardVc LCr;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	integer CompQty,comp;
	record ORVc ORr;
	record IVVc IVr;
	record CSVc CSr;
	vector val LCbal;
	vector date cucrdate,lccrdate;
	vector integer contage;
	
	setcompany(1,true);
	
	blockload(Compb);
	CompQty = matrowcnt(Compb);
	logtext(0,"WebCheckListToClose start");
	
	addfiletoarea("ListToCkeckDublicates.txt",ainput,false);
	lines = countlinesinarea(ainput);
	
	addtexttoarea("Code" & chr(9),aoutput);
	addtexttoarea("is Vendor" & chr(9),aoutput);
	addtexttoarea("is Employe" & chr(9),aoutput);
	addtexttoarea("has Activity" & chr(9),aoutput);
	addtexttoarea("has LC" & chr(9),aoutput);
	addtexttoarea("LC points" & chr(9),aoutput);
	addtexttoarea("Contact Date" & chr(9),aoutput);
	addtexttoarea("LC Date" & chr(9),aoutput);
	addtexttoarea("ContactDaysAge" & chr(9),aoutput);
	addtexttoarea("IDEA Contact" & chr(9),aoutput);
	addtexttoarea("Closed in Hansa" & chr(9),aoutput);
	addtexttoarea(chr(13) & chr(10),aoutput);
	
	for(i=0;i<lines;i=i+1)begin
		linestr = getlinefromarea(ainput,i);
		
		if(nonblank(linestr))then begin
			CUr.Code = linestr;
			
			if(readfirstmain(CUr,1,true))then begin
				if(CUr.CustCat=="IDEA")then begin
					isIDEA[CUr.Code] = true;
				end;
				if(CUr.blockedFlag>0)then begin
					isClosed[CUr.Code] = true;
				end;
				cucrdate[CUr.Code] = CUr.DateCreated;
				if(CUr.VEType>0)then begin
					isVendor[CUr.Code] = true;
				end;
				if(CUr.EmployeeType>0)then begin
					isEmpl[CUr.Code] = true;
				end;
				LCr.CustCode = CUr.Code;
				if(ReadFirstKey("ActCustCode",LCr,1,true)) then begin 
					hasLC[CUr.Code] = true; 
					LCbal[CUr.Code] = LCr.PointsBalance + LCr.StartBalance + LCr.PointsBalanceTotal;
					lccrdate[CUr.Code] = LCr.StartDate;
				end;
				
				if(nonblankdate(cucrdate[CUr.Code]) or nonblankdate(lccrdate[CUr.Code]))then begin
					
					contage[CUr.Code] = datediff(currentdate,cucrdate[CUr.Code]);
					if(contage[CUr.Code]<datediff(currentdate,lccrdate[CUr.Code]))then begin
						contage[CUr.Code] = datediff(currentdate,lccrdate[CUr.Code]);
					end;
					
				end else begin
					contage[CUr.Code] = 11111;
				end;
				
				for(comp=0;comp<CompQty;comp=comp+1) begin
					matrowget(Compb,comp,Comprw);
					if(Comprw.ActiveStatus==0) then begin
						SetCompany(comp+1,false);
						ORr.CustCode = CUr.Code;
						if(ReadFirstKey("CustCode",ORr,1,true)) then begin hasActiv[CUr.Code] = true; comp = CompQty; end;
						CSr.CustCode = CUr.Code;
						if(ReadFirstMain(CSr,1,true))then begin hasActiv[CUr.Code] = true; comp = CompQty; end;
					end;
				end;
				
			end else begin
				contage[linestr] = 11111;
				isClosed[linestr] = true;
			end;
			contacts[contacts.length] = linestr;
		end else begin
			//check compained contacts
			for(j=0;j<contacts.length;j=j+1)begin
				addtexttoarea(contacts[j] & chr(9),aoutput);
				addtexttoarea(isVendor[contacts[j]] & chr(9),aoutput);
				addtexttoarea(isEmpl[contacts[j]] & chr(9),aoutput);
				addtexttoarea(hasActiv[contacts[j]] & chr(9),aoutput);
				addtexttoarea(hasLC[contacts[j]] & chr(9),aoutput);
				addtexttoarea(LCbal[contacts[j]] & chr(9),aoutput);
				addtexttoarea(cucrdate[contacts[j]] & chr(9),aoutput);
				addtexttoarea(lccrdate[contacts[j]] & chr(9),aoutput);
				addtexttoarea(contage[contacts[j]] & chr(9),aoutput);				
				addtexttoarea(isIDEA[contacts[j]] & chr(9),aoutput);
				addtexttoarea(isClosed[contacts[j]] & chr(9),aoutput);
				addtexttoarea(chr(13) & chr(10),aoutput);
			end;
			addtexttoarea(chr(13) & chr(10),aoutput);
			ClearArray(contacts);
			ClearVector(isVendor);
			ClearVector(isEmpl);
			ClearVector(hasLC);
			ClearVector(LCbal);
			ClearVector(lccrdate);
			ClearVector(cucrdate);
			ClearVector(contage);
			ClearVector(isIDEA);
			ClearVector(isClosed);
		end;
		
		
		
		
	
	end;
	
	writeareatofile(aoutput,"O_ListToCkeckDublicates.txt",0);
	
	logtext(0,"WebCheckListToClose end");
	
return;
end;

global webpublic updating procedure WebDeleteGlobalItemNotForBtrx()
begin
	record BrandsECommerceBlock BECB;
	row BrandsECommerceBlock BECBrw;
	integer i;
	vector boolean vcheck;
	record GlobalItemVc GIr,mainGIr, GI2r;
	
	
	setcompany(29,false);
	
	blockload(BECB);
	
	for (i=0;i<matrowcnt(BECB);i=i+1) begin
		matrowget(BECB,i,BECBrw);
		vcheck[BECBrw.Brand] = true;
		logtext(0,BECBrw.Brand);
	end;
	
	while(loopmain(GIr,1,true))begin
		if(vcheck[left(GIr.Code,8)])then begin
			logtext(0,"delete GIR " & GIr.Code & " " & GIr.Name);
			recorddelete(GIr);
			stepback(GIr);
		end;
	end;

return;
end;

global webpublic updating procedure WebRestoreCostAndCurncyForIN()
begin
	record INVc INr,origINr,oldINr;
	record RHistVc RHr;
	string 100 tstr;
	boolean TrHs;
	integer i;
	record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
	
	blockload(Compb);
	
	for(i=1;i<26;i=i+1)begin
		setcompany(i,false);
		matrowget(Compb,i-1,Comprw);
		if(CompanyIsJWLikeCompany(i)==false and Comprw.ActiveStatus==0)then begin
			resetloop(INr);
			INr.Code = "";
			while(loopmain(INr,1,true))begin
				if(INr.InPrice>0 and 	(INr.LastPurchPrice2==blankval or INr.LastPurchPrice2==0))then begin
					if(blank(INr.LastPurchCurncyCode))then begin
				
						tstr = BuildRecordIdStr(INr,i);
			
						RHr.RecidStr = tstr;
						RHr.SerNr = 999999999;
						TrHs = true;
						while(loopbackkey("RecidStr",RHr,2,TrHs))begin
							if(RHr.RecidStr!=tstr)then begin TrHs = false; end;
					
							if(TrHs)then begin
								ReadOriginalRecord(RHr,origINr);	
								if(origINr.Code==INr.Code and nonblank(origINr.LastPurchCurncyCode) and origINr.LastPurchPrice2>0)then begin
									weboutstring(Comprw.CompCode & "  " & INr.Code & " Restore CURNCY " & origINr.LastPurchCurncyCode & " price " & origINr.LastPurchPrice2);
									weboutstring("<BR>");
									TrHs = false;
									/*recordcopy(oldINr,INr);
										INr.LastPurchCurncyCode = origINr.LastPurchCurncyCode;
										INr.LastPurchPrice2 = origINr.LastPurchPrice2;
									recordupdate(oldINr,INr,true);*/
								end;
							end;
			
						end;
						resetloop(RHr);
						
					end;
				end;
			end;
		end;
	
	end;
	
	
return;
end;



global webpublic updating procedure WebMoveTransFromIDtoFound()
begin
	Record TRVc TRr,copyTRr,olTRr;
	row TRVc TRrw;
	boolean TrHs,testf,foundf,copyflag,deleteflag;
	integer i,rwcnt,j;
	array string 20 typrtomove;
	string 100 temstr;
	record CLInVc CLInr,oldCLInr;
	record CLOutVc CLOutr,oldCLOutr;
	
	copyflag = false;//!!!!!!!!!!!!!!!!!!!!!!!!! change to true if transfer to 33!!!
	deleteflag = false;// set tru if delete all in 18!!!
	
	if(fileexists("demoserver"))then begin
		//copyflag = true;
		//deleteflag = true;
	end;
	//copyflag = true;
	//deleteflag = true;
	
	setcompany(18,false);
	
	typrtomove[0] = "HOLDING";
	typrtomove[1] = "OBJECT_2";
	typrtomove[2] = "OBJECT_3";
	typrtomove[3] = "OBJECT_4";
	typrtomove[4] = "OBJECT_5";
	typrtomove[5] = "OBJECT_6";
	typrtomove[6] = "AMAF";
	typrtomove[7] = "AGROPARK";
	typrtomove[8] = "AZAD";
	
	weboutstring("<html>");
	weboutstring("<head>");
		weboutstring("<script src=\"https://code.jquery.com/jquery-3.4.1.js\"></script>");
		weboutstring("<script>");
			weboutstring("$(document).ready(function() {");
				weboutstring("$('tr:not(.header)').hide();");

				weboutstring("$('tr.header').click(function() {");
					weboutstring("$(this).find('span').text(function(_, value) {");
						weboutstring("return value == '-' ? '+' : '-'");
					weboutstring("});");
		
					weboutstring("$(this).nextUntil('tr.header').slideToggle(100, function() {});");
				weboutstring("});");
			weboutstring("});");
		weboutstring("</script>");
	
		weboutstring("<style>");
			weboutstring("table,");
			weboutstring("tr,");
			weboutstring("td,");
			weboutstring("th {");
				weboutstring("border: 1px solid black;");
				weboutstring("border-collapse: collapse;");
			weboutstring("}");

			weboutstring("tr.header {");
				weboutstring("cursor: pointer;");
			weboutstring("}");

		weboutstring("</style>");
		
	weboutstring("</head>");
	
	weboutstring("<table>");
	

	TRr.TransDate = stringtodate("01/01/2020");
	TrHs = true;
	while(loopkey("TransDate",TRr,1,TrHs))begin
		testf = true;
		if(TRr.TransDate<stringtodate("01/01/2020"))then begin TrHs = false; testf = false; end;
		if(TRr.IntYc>=300)then begin testf = false; end;
		if(TRr.IntYc==203)then begin testf = false; end;
		if(TRr.IntYc==204)then begin testf = false; end;
		if(TRr.IntYc==205)then begin testf = false; end;
		
		if(testf)then begin
			foundf = false;
			rwcnt = matrowcnt(TRr);
			for(i=0;i<rwcnt;i=i+1)begin
				matrowget(TRr,i,TRrw);
				if(TRrw.stp==1 and TRrw.ovst==0)then begin
					for(j=0;j<typrtomove.length;j=j+1)begin
						if(setinset(typrtomove[j],TRrw.Objects))then begin
							if(typrtomove[j]=="HOLDING" and TRrw.AccNumber=="50")then begin
								foundf = true;
							end;
							if(typrtomove[j]!="HOLDING")then begin
								foundf = true;
							end;
						end;
					end;
				end;
			end;
			
			if(foundf)then begin
				
				if(deleteflag)then begin
					if(TRr.IntYc==212)then begin
						CLOutr.SerNr = TRr.Number;
						if(readfirstmain(CLOutr,1,true))then begin
							//recorddelete(CLOutr);
							//recordcopy(oldCLOutr,CLOutr);
								CLOutr.OKFlag = 0;
								recordstore(CLOutr,true);
								//recordupdate(oldCLOutr,CLOutr,true);
							logtext(0,"CLOutr recorddelete in 18 " & CLOutr.SerNr);
						end;
					end;
					if(TRr.IntYc==211)then begin
						CLInr.SerNr = TRr.Number;
						if(readfirstmain(CLInr,1,true))then begin
								//recordcopy(oldCLInr,CLInr);
								CLInr.OKFlag = 0;
								recordstore(CLInr,true);
								//recordupdate(oldCLInr,CLInr,true);
								//recorddelete(CLInr);
								logtext(0,"CLInr recorddelete in 18 " & CLInr.SerNr);
						end;
					end;
					if (TRVcRecordRemove(TRr,TRr,0,0)<=0) then begin
          end;
					recorddelete(TRr);
					stepback(TRr);
				end;
				
				
				if(copyflag)then begin
					if(TRr.IntYc==212)then begin
						CLOutr.SerNr = TRr.Number;
						if(readfirstmain(CLOutr,1,true))then begin
							setcompany(33,false);
								//recordstore(CLOutr,false);
								logtext(0,3);
								logtext(0,"CLOutr saved in 33 " & CLOutr.SerNr);
							setcompany(18,false);
							logtext(0,2);
						end;
					end;
					logtext(0,1);
					if(TRr.IntYc==211)then begin
						CLInr.SerNr = TRr.Number;
						if(readfirstmain(CLInr,1,true))then begin
							setcompany(33,false);
								//recordstore(CLInr,false);
								logtext(0,"CLInr saved in 33 " & CLInr.SerNr);
							setcompany(18,false);
						end;
					end;
					logtext(0,"CopyTR");
					recordcopy(copyTRr,TRr);
					if(copyTRr.IntYc<200)then begin
						copyTRr.IntYc = 55;
					end;		
					logtext(0,"CopyTR1");
					setcompany(33,false);	
					logtext(0,"CopyTR2");		
					logtext(0,"TRVc saved in 33 " & copyTRr.Number & " " & copyTRr.IntYc);
					//recordstore(copyTRr,false);
					logtext(0,"CopyTR3");
					setcompany(18,false);
					logtext(0,"CopyTR4");
				end;

				
				weboutstring("<tr class=\"header\">");
				
				weboutstring("<td>" & TRr.TransDate & "</td>");
				temstr = "";
				YcToStr(TRr.IntYc,temstr);
				weboutstring("<td>" & TRr.IntYc & "</td>");
				weboutstring("<td>" & temstr & "</td>");
				weboutstring("<td>" & TRr.Comment & "</td>");
				
				weboutstring("</tr>");
				
				for(i=0;i<rwcnt;i=i+1)begin
					matrowget(TRr,i,TRrw);
					if(TRrw.stp==1 and TRrw.ovst==0)then begin
						weboutstring("<tr bgcolor=\"#ffcc00\">");
							weboutstring("<td>" & TRrw.AccNumber & "</td>");
							weboutstring("<td>" & TRrw.Objects & "</td>");
							weboutstring("<td>" & TRrw.Comment & "</td>");
							weboutstring("<td>" & TRrw.DebVal & "</td>");
							weboutstring("<td>" & TRrw.CredVal & "</td>");
							weboutstring("<td>" & TRrw.Curncy & "</td>");
							weboutstring("<td>" & TRrw.CurDebVal & "</td>");
							weboutstring("<td>" & TRrw.CurCredVal & "</td>");
						weboutstring("</tr>");
					end;
				end;
				
				
				
				
			end;
			
		end;
		
	end;
	
	weboutstring("</table>");
	weboutstring("</html>");
return;
end;





global webpublic updating procedure WebFindErrorSHFromIDGroupComp()
begin
	record SHVc SHr;
	row SHVc SHrw;
	record POVc POr;
	record PUVc PUr;
	row PUVc PUrw;
	boolean TrHs, testf, remf;
	integer MainCompany, i, LCNt;
	record ECVendFobSetBlaock CObjr;
	row ECVendFobSetBlaock CObjrw;
	vector integer vObjComp;
	vector val vItemFRV;
	record RLinkVc RLr;
	LongInt PUrSerNr, cnt1, cnt2, shcnt;
	record ItemHistVc IHr;
	
	
	MainCompany = 18;
	
	SetCompany(MainCompany,false);
	BlockLoad(CObjr);
	for (i=0;i<matrowcnt(CObjr);i=i+1) begin
		matrowget(CObjr,i,CObjrw);
		vObjComp[CObjrw.VendName] = CObjrw.CompanyNr;
	end;
	
	SHr.OKFlag = 1;
	TrHs = true;
	
	cnt1 = 0;
	cnt2 = 0;
	shcnt = 0;
	while (loopkey("OKFlag",SHr,1,TrHs)) begin
		if (SHr.OKFlag != 1) then begin TrHs = false; end;
		if (TrHs) then begin
			for (i=0;i<matrowcnt(SHr);i=i+1)begin
				matrowget(SHr,i,SHrw);
				vItemFRV[SHr.SerNr & "_" & SHrw.OrdRow] = SHrw.FIFORowVal;
			end;
			LCNt = 1;
			while (ReadRecordLink(SHr,LCNt,PUr,RLr)) begin
				PUrSerNr = PUr.SerNr;
				logtext(0,PUrSerNr);
				if(setcompany(vObjComp[SHr.CustCode],false))then begin
					PUr.SerNr = PUrSerNr;
					if (ReadFirstMain(PUr,1,true)) then begin
						if (PUr.OKFlag==1) then begin
							for (i=0;i<matrowcnt(PUr);i=i+1) begin
								matrowget(PUr,i,PUrw);
								if (vItemFRV[SHr.SerNr & "_" & i] != PUrw.Sum and vItemFRV[SHr.SerNr & "_" & i]/PUrw.Sum > 1.5) then begin
									IHr.FileName = "PUVc";
									IHr.TransNr = PUr.SerNr;
									IHr.Row = i;
									remf = false;
									if(ReadFirstKey("FNTransNr",IHr,3,true)) then begin
										if (IHr.Qty != IHr.RemQty) then begin
											remf = true;
											shcnt = shcnt + 1;
										end;
									end;
									weboutstring("SH SerNr: " & SHr.SerNr & " Company: " & vObjComp[SHr.CustCode] & " PU SerNr: " & PUr.SerNr & " row: " & i+1 & " Diff: " & vItemFRV[SHr.SerNr & "_" & i] - PUrw.Sum & " Remf: " & remf);
									weboutstring("<BR>");
									cnt1 = cnt1 + 1;
								end;
								if (vItemFRV[SHr.SerNr & "_" & i] != PUrw.Sum and PUrw.Sum/vItemFRV[SHr.SerNr & "_" & i] > 1.5) then begin 
									IHr.FileName = "PUVc";
									IHr.TransNr = PUr.SerNr;
									IHr.Row = i;
									remf = false;
									if(ReadFirstKey("FNTransNr",IHr,3,true)) then begin
										if (IHr.Qty != IHr.RemQty) then begin
											remf = true;
											shcnt = shcnt + 1;
										end;
									end;
									weboutstring("SH SerNr: " & SHr.SerNr & " Company: " & vObjComp[SHr.CustCode] & " PU SerNr: " & PUr.SerNr & " row: " & i+1 & " Diff: " & vItemFRV[SHr.SerNr & "_" & i] - PUrw.Sum & " Remf: " & remf);
									weboutstring("<BR>");
									cnt1 = cnt1 + 1;
								end;
								// if (vItemFRV[SHr.SerNr & "_" & i] != PUrw.Sum and vItemFRV[SHr.SerNr & "_" & i] - PUrw.Sum < 1) then begin 
									// weboutstring("SH SerNr: " & SHr.SerNr & " Company: " & vObjComp[SHr.CustCode] & " PU SerNr: " & PUr.SerNr & " row: " & i+1 & " Diff: " & vItemFRV[SHr.SerNr & "_" & i] - PUrw.Sum);
									// weboutstring("<BR>");
									// cnt2 = cnt2 + 1;
								// end;
							end;
						end;
					end;
				end;
				resetcompany(MainCompany);
				LCNt = LCNt + 1;
			end;
		end;
	end;
	weboutstring("Items > 1 diff " & cnt1);
	weboutstring("<BR>");
	weboutstring("Shipped items " & shcnt);
	weboutstring("<BR>");
return;
end;



global updating procedure ClearAltcode(record INVc INr)
begin

	record INVc AltINr;
	
	logtext (0,"ClearAltcode");
	AltINr.Code = INr.AlternativeCode;
	if (ReadFirstMain(AltINr,1,true)) then begin
		INr.AlternativeCode = "";
		if (recordStore (INr,true)) then begin
			weboutstring("Alt code " & INr.AlternativeCode & " in Item with code " & INr.Code & "is cleared in company No " & CurrentCompany);
			weboutstring("<BR>");
			logtext (0,INr.Code);
		end;
	end;
	
return;
end;




global webpublic procedure WebFindAndClearAltCodesInCodes()
begin
	record INVc INr;
	record CompaniesBlock CBb;
	row CompaniesBlock Comprw;
	integer i, slipcont, cnt, allINs;
	array string 255 INrs;
	
	BlockLoad(CBb);
	
	for (i=0;i<matrowcnt(CBb);i=i+1) begin
		matrowget(CBb,i,Comprw);
		allINs = 0;
		if(Comprw.ActiveStatus==0 and i+1!=18 and i+1!=29 and i+1!=31 and i+1!=32 and i+1!=33) then begin
			SetCompany(i+1,false);
			slipcont = 0;
			INr.Code = "";
			cnt = 0;
			while (loopmain(INr,1,true)) begin
				if (nonblank(INr.AlternativeCode)) then begin
					INrs[cnt] = INr.Code;
					cnt = cnt + 1;
				end;
			end;
			resetloop(INr);
			allINs = cnt;
			for (cnt=0;cnt<allINs;cnt=cnt+1)begin
				INr.Code = INrs[cnt];
				if (ReadFirstMain(INr,1,true)) then begin
					queued.ClearAltcode(INr);
					slipcont = slipcont + 1;					
					if(slipcont>10)then begin
						millisleep(50);
						slipcont = 0;
					end;
				end;
			end;
			ClearArray(INrs);
		end;
	end;
			
return;
end;


global webpublic updating procedure WebFindErrorCostPrFromIDGroup()
begin
	integer MainCompany, i, lNr;
	string 255 CCitemcode, Origitemcode, upd, noUpdIHf;
	val cpriceazn, cpricecb, IHcostpricecur, IHtotcostprice, cpriceaznSumQty;
	record ConsItemVc CIr;
	record ItemHistVc IHr;
	boolean TrHs,testf,updf,updTRf,updDocf,transSearchf;
	record CompaniesBlock CBb;
	row CompaniesBlock Comprw;
	record INVc INr;
	record PUVc PUr;
	row PUVc PUrw;
	record IVVc IVr, fifocurIVr;
	row IVVc IVrw;
	record StockMovVc SMr;
	row StockMovVc SMrw;
	record SHVc SHr;
	row SHVc SHrw;
	record SDVc SDr;
	row SDVc SDrw;
	record RetVc Retr;
	row RetVc Retrw;
	record RetPUVc RetPUr;
	row RetPUVc RetPUrw;
	record TRVc TRr, OldTRr;
	row TRVc TRrw;
	record RLinkVc RLr;
	record ORVc ORr;
	row ORvc ORrw;
	record LocationVc Lcr;
  record SMVc gSMr;
	
	BlockLoad(CBb);
	MainCompany = 18;
	setcompany(MainCompany,false);
	
	CCitemcode = UpperCase(WebGetArg("itemcode"));
  cpriceazn = StringToVal(WebGetArg("cpriceazn"),M4Val);
  cpricecb = StringToVal(WebGetArg("cpricecb"),M4Val);
	noUpdIHf = WebGetArg("noupdf");
	upd = WebGetArg("updf");
	if (upd=="true") then begin
		updf = true;
	end else begin
		updf = false;
	end;

	if (nonblank(CCitemcode) and nonblank(cpriceazn) and nonblank(cpricecb)) then begin
		CIr.Code = CCitemcode;
		if (ReadFirstMain(CIr,1,true)) then begin
			Origitemcode = CIr.LocCode;
			IHr.ArtCode = CCitemcode;
			IHr.TransDate = StringToDate("01/01/2020");
			TrHs = true;
			weboutstring("________________________ID Group Company________________________");
			weboutstring("<BR>");
			while (LoopKey("ArtCode",IHr,2,TrHs)) begin
				testf = true;
				IHcostpricecur = blankval;
				cpriceaznSumQty = blankval;
				IHtotcostprice = blankval;
				IHcostpricecur = IHr.TotCostPriceCurncy / AbsoluteVal(IHr.Qty);
				IHtotcostprice = IHr.TotCostPrice / AbsoluteVal(IHr.Qty);
				if (IHr.ArtCode!=CCitemcode) then begin TrHs = false; testf = false; end;
				if (IHr.TransDate<StringToDate("01/01/2020")) then begin TrHs = false; testf = false; end;
				if (cpricecb > IHcostpricecur and 0.05 < cpricecb - IHcostpricecur) then begin testf = false; end;
				if (cpricecb < IHcostpricecur and 0.05 < IHcostpricecur - cpricecb) then begin testf = false; end;
				if (cpriceazn >= IHtotcostprice and cpriceazn / IHtotcostprice < 1.5) then begin testf = false; end;
				if (cpriceazn <= IHtotcostprice and IHtotcostprice / cpriceazn < 1.5) then begin testf = false; end;
				if (SetInSet(IHr.SerNr,noUpdIHf)) then begin testf = false; end;
				if (testf) then begin
					if (!updf) then begin
						weboutstring("Item hist. No.: " & IHr.SerNr & " Document: " & IHr.FileName & " Doc. SerNr: " & IHr.TransNr & " CostPrice: " & IHtotcostprice);
						weboutstring("<BR>");
					end else begin
						updDocf = false;
						updTRf = false;
						transSearchf = false;
						cpriceaznSumQty = cpriceazn * AbsoluteVal(IHr.Qty);
						switch(IHr.FileName)begin
							case "PUVc":
								PUr.SerNr = IHr.TransNr;
								if (readfirstmain(PUr,1,true)) then begin
									matrowget(PUr,IHr.Row,PUrw);
									PUrw.CostPrice = cpriceazn;
									PUrw.Sum = cpriceaznSumQty;
									matrowput(PUr,IHr.Row,PUrw);
									PUVc_PasteCostPrice(PUr,IHr.Row);
									matrowget(PUr,IHr.Row,PUrw);
									matrowput(PUr,IHr.Row,PUrw);
									OldTRr.Number = PUr.SerNr;
									OldTRr.IntYc = PUYc;
									if (ReadFirstMain(OldTRr,2,true)) then begin 
										DeleteTransaction(OldTRr.Number,OldTRr.IntYc);
										recordstore(PUr,true);
										if (nonblank(PUrw.Location)) then begin
											Lcr.Code = PUrw.Location;
										end else begin
											Lcr.Code = PUr.Location;
										end;
										if (ReadFirstMain(Lcr,1,true)) then begin
											if(MakeTransFromPU(TRr,PUr,Lcr,true)==0)then begin
												SaveTrans(TRr);
												AddTTrans_PUVc(TRr,PUr);
												updDocf = true;
											end else begin
												weboutstring("MakeTransFromPU ERROR " & MakeTransFromPU(TRr,PUr,Lcr,true));
												weboutstring("<BR>");
											end;
										end;
									end else begin
										recordstore(PUr,true);
										if (nonblank(PUrw.Location)) then begin
											Lcr.Code = PUrw.Location;
										end else begin
											Lcr.Code = PUr.Location;
										end;
										if (ReadFirstMain(Lcr,1,true)) then begin
											if(MakeTransFromPU(TRr,PUr,Lcr,true)==0)then begin
												SaveTrans(TRr);
												AddTTrans_PUVc(TRr,PUr);
												updDocf = true;
											end else begin
												weboutstring("MakeTransFromPU ERROR " & MakeTransFromPU(TRr,PUr,Lcr,true));
												weboutstring("<BR>");
											end;
										end;
									end;
								end;
							case "RetPUVc":
								RetPUr.SerNr = IHr.TransNr;
								if (readfirstmain(RetPUr,1,true)) then begin
									matrowget(RetPUr,IHr.Row,RetPUrw);
									RetPUrw.PUCostPrice = cpriceazn;
									RetPUrw.FIFO = cpriceazn;
									RetPUrw.FIFORowVal = cpriceaznSumQty;
									matrowput(RetPUr,IHr.Row,RetPUrw);
									RetPUSumUp(RetPUr);
									TRr.Number = RetPUr.SerNr;
									TRr.IntYc = RetPUYc;
									if (ReadFirstMain(TRr,2,true)) then begin transSearchf = true; end;
								end;
							case "SHVc":
								SHr.SerNr = IHr.TransNr;
								if(readfirstmain(SHr,1,true))then begin
									matrowget(SHr,IHr.Row,SHrw);
									SHrw.BBCostPrice = cpriceazn;
									SHrw.FIFO = cpriceazn;
									SHrw.FIFORowVal = cpriceaznSumQty;
									matrowput(SHr,IHr.Row,SHrw);
									lNr = 1;
									if (ReadRecordLink(SHr,lNr,ORr,RLr)) then begin
										for (i=0;i<matrowcnt(ORr);i=i+1) begin
											matrowget (ORr,i,ORrw);
											if (ORrw.ArtCode==CCitemcode and ORrw.Quant==AbsoluteVal(IHr.Qty)) then begin
												ORrw.Price = cpriceazn;
												ORrw.Sum = cpriceaznSumQty;
												matrowput(ORr,i,ORrw);
												ORDchsum(ORr,i);
												matrowget(ORr,i,ORrw); 
												ORSumup(ORr);
												matrowput(ORr,i,ORrw); 
											end;
										end;	
										recordstore(ORr,true);
									end;
									TRr.Number = SHr.SerNr;
									TRr.IntYc = SHYc;
									if (ReadFirstMain(TRr,2,true)) then begin transSearchf = true; end;
								end;
							case "SDVc":
								SDr.SerNr = IHr.TransNr;
								if(readfirstmain(SDr,1,true))then begin
									matrowget(SDr,IHr.Row,SDrw);
									SDrw.FIFO = cpriceazn;
									SDrw.FIFORowVal = cpriceaznSumQty;
									matrowput(SDr,IHr.Row,SDrw);
									TRr.Number = SDr.SerNr;
									TRr.IntYc = SDYc;
									if (ReadFirstMain(TRr,2,true)) then begin transSearchf = true; end;
								end;
							case "RetVc":
								Retr.SerNr = IHr.TransNr;
								if(readfirstmain(Retr,1,true))then begin
									matrowget(Retr,IHr.Row,Retrw);
									Retrw.UPrice = cpriceazn;
									Retrw.CostPrice = cpriceazn;
									Retrw.BBCostPrice = cpriceazn;
									matrowput(Retr,IHr.Row,Retrw);
									TRr.Number = Retr.SerNr;
									TRr.IntYc = RetYc;
									if (ReadFirstMain(TRr,2,true)) then begin transSearchf = true; end;
								end;
							case "IVVc":
								IVr.SerNr = IHr.TransNr;
								if(readfirstmain(IVr,1,true))then begin
									matrowget(IVr,IHr.Row,IVrw);
									IVrw.BasePrice = cpriceazn;
									IVrw.FIFO = cpriceazn;
									IVrw.FIFORowVal = cpriceaznSumQty;
									matrowput(IVr,IHr.Row,IVrw);
									TRr.Number = IVr.SerNr;
									TRr.IntYc = IVYc;
									if (ReadFirstMain(TRr,2,true)) then begin 
										RecordCopy(OldTRr,TRr);
										for (i=0;i<matrowcnt(TRr);i=i+1) begin
											matrowget(TRr,i,TRrw);
											if (TRrw.DebVal!=blankval and ((TRrw.DebVal-IHr.TotCostPrice<0.05 and TRrw.DebVal>=IHr.TotCostPrice) or 
																										(IHr.TotCostPrice-TRrw.DebVal<0.05 and TRrw.DebVal<=IHr.TotCostPrice))) then begin
												matrowget(TRr,i,TRrw);
												TRrw.DebVal = cpriceaznSumQty;
												matrowput(TRr,i,TRrw);
												// TRVc_PasteDebVal(TRr,i);
												matrowget(TRr,i,TRrw);
												matrowput(TRr,i,TRrw);
											end;
											matrowget(TRr,i,TRrw);
											if (TRrw.CredVal!=blankval and ((TRrw.CredVal-IHr.TotCostPrice<0.05 and TRrw.CredVal>=IHr.TotCostPrice) or 
																										(IHr.TotCostPrice-TRrw.CredVal<0.05 and TRrw.CredVal<=IHr.TotCostPrice))) then begin
												matrowget(TRr,i,TRrw);
												TRrw.CredVal = cpriceaznSumQty;
												matrowput(TRr,i,TRrw);
												// TRVc_PasteCredVal(TRr,i);
												matrowget(TRr,i,TRrw);
												matrowput(TRr,i,TRrw);
											end;
											matrowget(TRr,i,TRrw);
											if (TRrw.Curncy=="AZN" and TRrw.CurDebVal!=blankval and ((TRrw.CurDebVal-IHr.TotCostPrice<0.05 and TRrw.CurDebVal>=IHr.TotCostPrice) or 
																																								(IHr.TotCostPrice-TRrw.CurDebVal<0.05 and TRrw.CurDebVal<=IHr.TotCostPrice))) then begin
												matrowget(TRr,i,TRrw);
												TRrw.CurDebVal = cpriceaznSumQty;
												matrowput(TRr,i,TRrw);
												// TRVc_PasteCurDebVal(TRr,i);
												matrowget(TRr,i,TRrw);
												matrowput(TRr,i,TRrw);
											end;
											matrowget(TRr,i,TRrw);
											if (TRrw.Curncy=="AZN" and TRrw.CurCredVal!=blankval and ((TRrw.CurCredVal-IHr.TotCostPrice<0.05 and TRrw.CurCredVal>=IHr.TotCostPrice) or 
																																									(IHr.TotCostPrice-TRrw.CurCredVal<0.05 and TRrw.CurCredVal<=IHr.TotCostPrice))) then begin
												matrowget(TRr,i,TRrw);
												TRrw.CurCredVal = cpriceaznSumQty;
												matrowput(TRr,i,TRrw);
												// TRVc_PasteCurCredVal(TRr,i);
												matrowget(TRr,i,TRrw);
												matrowput(TRr,i,TRrw);
											end;
											matrowput(TRr,i,TRrw);
										end;
										if (RecordUpdate(OldTRr,TRr,true)==0) then begin
											updTRf = true;
										end;
									end;
									// OldTRr.Number = IVr.SerNr;
									// OldTRr.IntYc = IVYc;
									// if (ReadFirstMain(OldTRr,2,true)) then begin 
										// DeleteTransaction(OldTRr.Number,OldTRr.IntYc);
										// recordstore(IVr,true);
										// if(MakeTransFromIV(TRr,gSMr,IVr,true,false,fifocurIVr)==0)then begin
											// SaveTrans(TRr);
											// AddTTrans_IVVc(TRr,IVr);
											// updDocf = true;
										// end else begin
											// weboutstring("MakeTransFromIV ERROR " & MakeTransFromIV(TRr,gSMr,IVr,true,false,fifocurIVr));
											// weboutstring("<BR>");
										// end;
									// end else begin
										// recordstore(IVr,true);
										// if(MakeTransFromIV(TRr,gSMr,IVr,true,false,fifocurIVr)==0)then begin
											// SaveTrans(TRr);
											// AddTTrans_IVVc(TRr,IVr);
											// updDocf = true;
										// end else begin
											// weboutstring("MakeTransFromIV ERROR " & MakeTransFromIV(TRr,gSMr,IVr,true,false,fifocurIVr));
											// weboutstring("<BR>");
										// end;
									// end;
								end;
							case "StockMovVc":
								SMr.SerNr = IHr.TransNr;
								if(readfirstmain(SMr,1,true))then begin
									matrowget(SMr,IHr.Row,SMrw);
									SMrw.OldPrice = cpriceazn;
									SMrw.NewPrice = cpriceazn;
									SMrw.FIFORowVal = cpriceaznSumQty;
									matrowput(SMr,IHr.Row,SMrw);
									if (IHr.Qty<0) then begin
										TRr.Number = SMr.SerNr;
										TRr.IntYc = SentSTMovYc;
										if (ReadFirstMain(TRr,2,true)) then begin 
											transSearchf = true; 
										end else begin
											updTRf = true;
										end;
									end else begin
										TRr.Number = SMr.SerNr;
										TRr.IntYc = STMovYc;
										if (ReadFirstMain(TRr,2,true)) then begin transSearchf = true; end;
									end;
								end;
							otherwise
								weboutstring("Other filename. FileName is " & IHr.FileName);
								weboutstring("<BR>");
						end;
						
						if (transSearchf) then begin
							RecordCopy(OldTRr,TRr);
							matrowget(TRr,IHr.Row * 2,TRrw);
								if (TRrw.DebVal!=blankval and TRrw.DebVal==IHr.TotCostPrice) then begin
									TRrw.DebVal = cpriceaznSumQty;
									matrowput(TRr,IHr.Row * 2,TRrw);
									TRVc_PasteDebVal(TRr,IHr.Row * 2);
									matrowget(TRr,IHr.Row * 2,TRrw);
								end;
								if (TRrw.CredVal!=blankval and TRrw.CredVal==IHr.TotCostPrice) then begin
									TRrw.CredVal = cpriceaznSumQty;
									matrowput(TRr,IHr.Row * 2,TRrw);
									TRVc_PasteCredVal(TRr,IHr.Row * 2);
									matrowget(TRr,IHr.Row * 2,TRrw);
								end;
								if (TRrw.Curncy=="AZN" and TRrw.CurDebVal!=blankval and TRrw.CurDebVal==IHr.TotCostPrice) then begin
									TRrw.CurDebVal = cpriceaznSumQty;
									matrowput(TRr,IHr.Row * 2,TRrw);
									TRVc_PasteCurDebVal(TRr,IHr.Row * 2);
									matrowget(TRr,IHr.Row * 2,TRrw);
								end;
								if (TRrw.Curncy=="AZN" and TRrw.CurCredVal!=blankval and TRrw.CurCredVal==IHr.TotCostPrice) then begin
									TRrw.CurCredVal = cpriceaznSumQty;
									matrowput(TRr,IHr.Row * 2,TRrw);
									TRVc_PasteCurCredVal(TRr,IHr.Row * 2);
									matrowget(TRr,IHr.Row * 2,TRrw);
								end;
							matrowput(TRr,IHr.Row * 2,TRrw);
							
							matrowget(TRr,IHr.Row * 2 + 1,TRrw);
								if (TRrw.DebVal!=blankval and TRrw.DebVal==IHr.TotCostPrice) then begin
									TRrw.DebVal = cpriceaznSumQty;
									matrowput(TRr,IHr.Row * 2 + 1,TRrw);
									TRVc_PasteDebVal(TRr,IHr.Row * 2 + 1);
									matrowget(TRr,IHr.Row * 2 + 1,TRrw);
								end;
								if (TRrw.CredVal!=blankval and TRrw.CredVal==IHr.TotCostPrice) then begin
									TRrw.CredVal = cpriceaznSumQty;
									matrowput(TRr,IHr.Row * 2 + 1,TRrw);
									TRVc_PasteCredVal(TRr,IHr.Row * 2 + 1);
									matrowget(TRr,IHr.Row * 2 + 1,TRrw);
								end;
								if (TRrw.Curncy=="AZN" and TRrw.CurDebVal!=blankval and TRrw.CurDebVal==IHr.TotCostPrice) then begin
									TRrw.CurDebVal = cpriceaznSumQty;
									matrowput(TRr,IHr.Row * 2 + 1,TRrw);
									TRVc_PasteCurDebVal(TRr,IHr.Row * 2 + 1);
									matrowget(TRr,IHr.Row * 2 + 1,TRrw);
								end;
								if (TRrw.Curncy=="AZN" and TRrw.CurCredVal!=blankval and TRrw.CurCredVal==IHr.TotCostPrice) then begin
									TRrw.CurCredVal = cpriceaznSumQty;
									matrowput(TRr,IHr.Row * 2 + 1,TRrw);
									TRVc_PasteCurCredVal(TRr,IHr.Row * 2 + 1);
									matrowget(TRr,IHr.Row * 2 + 1,TRrw);
								end;
							matrowput(TRr,IHr.Row * 2 + 1,TRrw);
							if (RecordUpdate(OldTRr,TRr,true)==0) then begin
								updTRf = true;
							end;
						end;
						
						
						if (updTRf) then begin
							switch(IHr.FileName)begin
								case "PUVc":
										recordstore(PUr,true);
										updDocf = true;
								case "SHVc":
										recordstore(SHr,true);
										updDocf = true;
								case "SDVc":
										recordstore(SDr,true);
										updDocf = true;
								case "RetVc":
										recordstore(Retr,true);
										updDocf = true;
								case "IVVc":
										recordstore(IVr,true);
										updDocf = true;
								case "StockMovVc":
										recordstore(SMr,true);
										updDocf = true;
								case "RetPUVc":
										recordstore(RetPUr,true);
										updDocf = true;
								otherwise
									weboutstring("Other filename. FileName is " & IHr.FileName);
									weboutstring("<BR>");
							end;
						end;
						
						if (updDocf) then begin
							IHr.TotCostPrice = cpriceaznSumQty;
							IHr.WATotCostPerLoc = cpriceaznSumQty;
							IHr.WATotCost = cpriceaznSumQty;
							IHr.CPTotCost = cpriceaznSumQty;
							IHr.RemCostPrice = AbsoluteVal(IHr.RemQty) * cpriceazn;
							recordstore(IHr,true);
						end;
					end;
				end;
			end;
			Resetloop(IHr);
			
			for (i=0;i<matrowcnt(CBb);i=i+1) begin
				matrowget(CBb,i,Comprw);
				if(Comprw.ActiveStatus==0 and i+1!=18 and i+1!=29 and i+1!=31 and i+1!=32 and i+1!=33) then begin
					SetCompany(i+1,false);
					INr.Code = Origitemcode;
					if (ReadFirstMain(INr,1,true)) then begin
						if (INr.BPIBrand==CIr.BrandCode) then begin
							IHr.ArtCode = Origitemcode;
							IHr.TransDate = StringToDate("01/01/2020");
							TrHs = true;
							weboutstring("________________________" & Comprw.CompName & " Company________________________");
							weboutstring("<BR>");
							while (LoopKey("ArtCode",IHr,2,TrHs)) begin
								testf = true;
								IHcostpricecur = blankval;
								IHtotcostprice = blankval;
								IHcostpricecur = IHr.TotCostPriceCurncy / AbsoluteVal(IHr.Qty);
								IHtotcostprice = IHr.TotCostPrice / AbsoluteVal(IHr.Qty);
								if (IHr.ArtCode!=Origitemcode) then begin TrHs = false; testf = false; end;
								if (IHr.TransDate<StringToDate("01/01/2020")) then begin TrHs = false; testf = false; end;
								if (cpricecb > IHcostpricecur and 0.05 < cpricecb - IHcostpricecur) then begin testf = false; end;
								if (cpricecb < IHcostpricecur and 0.05 < IHcostpricecur - cpricecb) then begin testf = false; end;
								if (cpriceazn >= IHtotcostprice and cpriceazn / IHtotcostprice < 1.5) then begin testf = false; end;
								if (cpriceazn <= IHtotcostprice and IHtotcostprice / cpriceazn < 1.5) then begin testf = false; end;
								if (SetInSet(IHr.SerNr,noUpdIHf)) then begin testf = false; end;
								if (testf) then begin
									if (!updf) then begin
										weboutstring("Item hist. No.: " & IHr.SerNr & " Document: " & IHr.FileName & " Doc. SerNr: " & IHr.TransNr & " CostPrice: " & IHtotcostprice);
										weboutstring("<BR>");
									end else begin
										updDocf = false;
										updTRf = false;
										transSearchf = false;
										cpriceaznSumQty = cpriceazn * AbsoluteVal(IHr.Qty);
										switch(IHr.FileName)begin
											case "PUVc":
												PUr.SerNr = IHr.TransNr;
												if (readfirstmain(PUr,1,true)) then begin
													matrowget(PUr,IHr.Row,PUrw);
													PUrw.CostPrice = cpriceazn;
													PUrw.Sum = cpriceaznSumQty;
													matrowput(PUr,IHr.Row,PUrw);
													PUVc_PasteCostPrice(PUr,IHr.Row);
													matrowget(PUr,IHr.Row,PUrw);
													matrowput(PUr,IHr.Row,PUrw);
													OldTRr.Number = PUr.SerNr;
													OldTRr.IntYc = PUYc;
													if (ReadFirstMain(OldTRr,2,true)) then begin 
														DeleteTransaction(OldTRr.Number,OldTRr.IntYc);
														recordstore(PUr,true);
														if (nonblank(PUrw.Location)) then begin
															Lcr.Code = PUrw.Location;
														end else begin
															Lcr.Code = PUr.Location;
														end;
														if (ReadFirstMain(Lcr,1,true)) then begin
															if(MakeTransFromPU(TRr,PUr,Lcr,true)==0)then begin
																SaveTrans(TRr);
																AddTTrans_PUVc(TRr,PUr);
																updDocf = true;
															end else begin
																weboutstring("MakeTransFromPU ERROR " & MakeTransFromPU(TRr,PUr,Lcr,true));
																weboutstring("<BR>");
															end;
														end;
													end else begin
														recordstore(PUr,true);
														if (nonblank(PUrw.Location)) then begin
															Lcr.Code = PUrw.Location;
														end else begin
															Lcr.Code = PUr.Location;
														end;
														if (ReadFirstMain(Lcr,1,true)) then begin
															if(MakeTransFromPU(TRr,PUr,Lcr,true)==0)then begin
																SaveTrans(TRr);
																AddTTrans_PUVc(TRr,PUr);
																updDocf = true;
															end else begin
																weboutstring("MakeTransFromPU ERROR " & MakeTransFromPU(TRr,PUr,Lcr,true));
																weboutstring("<BR>");
															end;
														end;
													end;
												end;
											case "RetPUVc":
												RetPUr.SerNr = IHr.TransNr;
												if (readfirstmain(RetPUr,1,true)) then begin
													matrowget(RetPUr,IHr.Row,RetPUrw);
													RetPUrw.PUCostPrice = cpriceazn;
													RetPUrw.FIFO = cpriceazn;
													RetPUrw.FIFORowVal = cpriceaznSumQty;
													matrowput(RetPUr,IHr.Row,RetPUrw);
													RetPUSumUp(RetPUr);
													TRr.Number = RetPUr.SerNr;
													TRr.IntYc = RetPUYc;
													if (ReadFirstMain(TRr,2,true)) then begin transSearchf = true; end;
												end;
											case "SHVc":
												SHr.SerNr = IHr.TransNr;
												if(readfirstmain(SHr,1,true))then begin
													matrowget(SHr,IHr.Row,SHrw);
													SHrw.BBCostPrice = cpriceazn;
													SHrw.FIFO = cpriceazn;
													SHrw.FIFORowVal = cpriceaznSumQty;
													matrowput(SHr,IHr.Row,SHrw);
													TRr.Number = SHr.SerNr;
													TRr.IntYc = SHYc;
													if (ReadFirstMain(TRr,2,true)) then begin transSearchf = true; end;
												end;
											case "SDVc":
												SDr.SerNr = IHr.TransNr;
												if(readfirstmain(SDr,1,true))then begin
													matrowget(SDr,IHr.Row,SDrw);
													SDrw.FIFO = cpriceazn;
													SDrw.FIFORowVal = cpriceaznSumQty;
													matrowput(SDr,IHr.Row,SDrw);
													TRr.Number = SDr.SerNr;
													TRr.IntYc = SDYc;
													if (ReadFirstMain(TRr,2,true)) then begin transSearchf = true; end;
												end;
											case "RetVc":
												Retr.SerNr = IHr.TransNr;
												if(readfirstmain(Retr,1,true))then begin
													matrowget(Retr,IHr.Row,Retrw);
													Retrw.UPrice = cpriceazn;
													Retrw.CostPrice = cpriceazn;
													Retrw.BBCostPrice = cpriceazn;
													matrowput(Retr,IHr.Row,Retrw);
													TRr.Number = Retr.SerNr;
													TRr.IntYc = RetYc;
													if (ReadFirstMain(TRr,2,true)) then begin transSearchf = true; end;
												end;
											case "IVVc":
												IVr.SerNr = IHr.TransNr;
												if(readfirstmain(IVr,1,true))then begin
													matrowget(IVr,IHr.Row,IVrw);
													IVrw.BasePrice = cpriceazn;
													IVrw.FIFO = cpriceazn;
													IVrw.FIFORowVal = cpriceaznSumQty;
													matrowput(IVr,IHr.Row,IVrw);
													TRr.Number = IVr.SerNr;
													TRr.IntYc = IVYc;
													if (ReadFirstMain(TRr,2,true)) then begin 
														RecordCopy(OldTRr,TRr);
														for (i=0;i<matrowcnt(TRr);i=i+1) begin
															matrowget(TRr,i,TRrw);
															if (TRrw.DebVal!=blankval and ((TRrw.DebVal-IHr.TotCostPrice<0.05 and TRrw.DebVal>=IHr.TotCostPrice) or 
																														(IHr.TotCostPrice-TRrw.DebVal<0.05 and TRrw.DebVal<=IHr.TotCostPrice))) then begin
																matrowget(TRr,i,TRrw);
																TRrw.DebVal = cpriceaznSumQty;
																matrowput(TRr,i,TRrw);
																// TRVc_PasteDebVal(TRr,i);
																matrowget(TRr,i,TRrw);
																matrowput(TRr,i,TRrw);
															end;
															matrowget(TRr,i,TRrw);
															if (TRrw.CredVal!=blankval and ((TRrw.CredVal-IHr.TotCostPrice<0.05 and TRrw.CredVal>=IHr.TotCostPrice) or 
																														(IHr.TotCostPrice-TRrw.CredVal<0.05 and TRrw.CredVal<=IHr.TotCostPrice))) then begin
																matrowget(TRr,i,TRrw);
																TRrw.CredVal = cpriceaznSumQty;
																matrowput(TRr,i,TRrw);
																// TRVc_PasteCredVal(TRr,i);
																matrowget(TRr,i,TRrw);
																matrowput(TRr,i,TRrw);
															end;
															matrowget(TRr,i,TRrw);
															if (TRrw.Curncy=="AZN" and TRrw.CurDebVal!=blankval and ((TRrw.CurDebVal-IHr.TotCostPrice<0.05 and TRrw.CurDebVal>=IHr.TotCostPrice) or 
																																												(IHr.TotCostPrice-TRrw.CurDebVal<0.05 and TRrw.CurDebVal<=IHr.TotCostPrice))) then begin
																matrowget(TRr,i,TRrw);
																TRrw.CurDebVal = cpriceaznSumQty;
																matrowput(TRr,i,TRrw);
																// TRVc_PasteCurDebVal(TRr,i);
																matrowget(TRr,i,TRrw);
																matrowput(TRr,i,TRrw);
															end;
															matrowget(TRr,i,TRrw);
															if (TRrw.Curncy=="AZN" and TRrw.CurCredVal!=blankval and ((TRrw.CurCredVal-IHr.TotCostPrice<0.05 and TRrw.CurCredVal>=IHr.TotCostPrice) or 
																																													(IHr.TotCostPrice-TRrw.CurCredVal<0.05 and TRrw.CurCredVal<=IHr.TotCostPrice))) then begin
																matrowget(TRr,i,TRrw);
																TRrw.CurCredVal = cpriceaznSumQty;
																matrowput(TRr,i,TRrw);
																// TRVc_PasteCurCredVal(TRr,i);
																matrowget(TRr,i,TRrw);
																matrowput(TRr,i,TRrw);
															end;
															matrowput(TRr,i,TRrw);
														end;
														if (RecordUpdate(OldTRr,TRr,true)==0) then begin
															updTRf = true;
														end;
													end;
													// OldTRr.Number = IVr.SerNr;
													// OldTRr.IntYc = IVYc;
													// if (ReadFirstMain(OldTRr,2,true)) then begin 
														// DeleteTransaction(OldTRr.Number,OldTRr.IntYc);
														// recordstore(IVr,true);
														// if(MakeTransFromIV(TRr,gSMr,IVr,true,false,fifocurIVr)==0)then begin
															// SaveTrans(TRr);
															// AddTTrans_IVVc(TRr,IVr);
															// updDocf = true;
														// end else begin
															// weboutstring("MakeTransFromIV ERROR " & MakeTransFromIV(TRr,gSMr,IVr,true,false,fifocurIVr));
															// weboutstring("<BR>");
														// end;
													// end else begin
														// recordstore(IVr,true);
														// if(MakeTransFromIV(TRr,gSMr,IVr,true,false,fifocurIVr)==0)then begin
															// SaveTrans(TRr);
															// AddTTrans_IVVc(TRr,IVr);
															// updDocf = true;
														// end else begin
															// weboutstring("MakeTransFromIV ERROR " & MakeTransFromIV(TRr,gSMr,IVr,true,false,fifocurIVr));
															// weboutstring("<BR>");
														// end;
													// end;
												end;
											case "StockMovVc":
												SMr.SerNr = IHr.TransNr;
												if(readfirstmain(SMr,1,true))then begin
													matrowget(SMr,IHr.Row,SMrw);
													SMrw.OldPrice = cpriceazn;
													SMrw.NewPrice = cpriceazn;
													SMrw.FIFORowVal = cpriceaznSumQty;
													matrowput(SMr,IHr.Row,SMrw);
													if (IHr.Qty<0) then begin
														TRr.Number = SMr.SerNr;
														TRr.IntYc = SentSTMovYc;
														if (ReadFirstMain(TRr,2,true)) then begin 
															transSearchf = true; 
														end else begin
															updTRf = true;
														end;
													end else begin
														TRr.Number = SMr.SerNr;
														TRr.IntYc = STMovYc;
														if (ReadFirstMain(TRr,2,true)) then begin transSearchf = true; end;
													end;
												end;
											otherwise
												weboutstring("Other filename. FileName is " & IHr.FileName);
												weboutstring("<BR>");
										end;
										
										if (transSearchf) then begin
											RecordCopy(OldTRr,TRr);
											matrowget(TRr,IHr.Row * 2,TRrw);
												if (TRrw.DebVal!=blankval and TRrw.DebVal==IHr.TotCostPrice) then begin
													TRrw.DebVal = cpriceaznSumQty;
													matrowput(TRr,IHr.Row * 2,TRrw);
													TRVc_PasteDebVal(TRr,IHr.Row * 2);
													matrowget(TRr,IHr.Row * 2,TRrw);
												end;
												if (TRrw.CredVal!=blankval and TRrw.CredVal==IHr.TotCostPrice) then begin
													TRrw.CredVal = cpriceaznSumQty;
													matrowput(TRr,IHr.Row * 2,TRrw);
													TRVc_PasteCredVal(TRr,IHr.Row * 2);
													matrowget(TRr,IHr.Row * 2,TRrw);
												end;
												if (TRrw.Curncy=="AZN" and TRrw.CurDebVal!=blankval and TRrw.CurDebVal==IHr.TotCostPrice) then begin
													TRrw.CurDebVal = cpriceaznSumQty;
													matrowput(TRr,IHr.Row * 2,TRrw);
													TRVc_PasteCurDebVal(TRr,IHr.Row * 2);
													matrowget(TRr,IHr.Row * 2,TRrw);
												end;
												if (TRrw.Curncy=="AZN" and TRrw.CurCredVal!=blankval and TRrw.CurCredVal==IHr.TotCostPrice) then begin
													TRrw.CurCredVal = cpriceaznSumQty;
													matrowput(TRr,IHr.Row * 2,TRrw);
													TRVc_PasteCurCredVal(TRr,IHr.Row * 2);
													matrowget(TRr,IHr.Row * 2,TRrw);
												end;
											matrowput(TRr,IHr.Row * 2,TRrw);
											
											matrowget(TRr,IHr.Row * 2 + 1,TRrw);
												if (TRrw.DebVal!=blankval and TRrw.DebVal==IHr.TotCostPrice) then begin
													TRrw.DebVal = cpriceaznSumQty;
													matrowput(TRr,IHr.Row * 2 + 1,TRrw);
													TRVc_PasteDebVal(TRr,IHr.Row * 2 + 1);
													matrowget(TRr,IHr.Row * 2 + 1,TRrw);
												end;
												if (TRrw.CredVal!=blankval and TRrw.CredVal==IHr.TotCostPrice) then begin
													TRrw.CredVal = cpriceaznSumQty;
													matrowput(TRr,IHr.Row * 2 + 1,TRrw);
													TRVc_PasteCredVal(TRr,IHr.Row * 2 + 1);
													matrowget(TRr,IHr.Row * 2 + 1,TRrw);
												end;
												if (TRrw.Curncy=="AZN" and TRrw.CurDebVal!=blankval and TRrw.CurDebVal==IHr.TotCostPrice) then begin
													TRrw.CurDebVal = cpriceaznSumQty;
													matrowput(TRr,IHr.Row * 2 + 1,TRrw);
													TRVc_PasteCurDebVal(TRr,IHr.Row * 2 + 1);
													matrowget(TRr,IHr.Row * 2 + 1,TRrw);
												end;
												if (TRrw.Curncy=="AZN" and TRrw.CurCredVal!=blankval and TRrw.CurCredVal==IHr.TotCostPrice) then begin
													TRrw.CurCredVal = cpriceaznSumQty;
													matrowput(TRr,IHr.Row * 2 + 1,TRrw);
													TRVc_PasteCurCredVal(TRr,IHr.Row * 2 + 1);
													matrowget(TRr,IHr.Row * 2 + 1,TRrw);
												end;
											matrowput(TRr,IHr.Row * 2 + 1,TRrw);
											if (RecordUpdate(OldTRr,TRr,true)==0) then begin
												updTRf = true;
											end;
										end;
										
										if (updTRf) then begin
											switch(IHr.FileName)begin
												case "PUVc":
														recordstore(PUr,true);
														updDocf = true;
												case "SHVc":
														recordstore(SHr,true);
														updDocf = true;
												case "SDVc":
														recordstore(SDr,true);
														updDocf = true;
												case "RetVc":
														recordstore(Retr,true);
														updDocf = true;
												case "IVVc":
														recordstore(IVr,true);
														updDocf = true;
												case "StockMovVc":
														recordstore(SMr,true);
														updDocf = true;
												case "RetPUVc":
														recordstore(RetPUr,true);
														updDocf = true;
												otherwise
													weboutstring("Other filename. FileName is " & IHr.FileName);
													weboutstring("<BR>");
											end;
										end;
										
										if (updDocf) then begin
											IHr.TotCostPrice = cpriceaznSumQty;
											IHr.WATotCostPerLoc = cpriceaznSumQty;
											IHr.WATotCost = cpriceaznSumQty;
											IHr.CPTotCost = cpriceaznSumQty;
											IHr.RemCostPrice = AbsoluteVal(IHr.RemQty) * cpriceazn;
											recordstore(IHr,true);
										end;
									end;
								end;
							end;
							Resetloop(IHr);		
						end;
					end;
				end;
			end;
			
			
		end else begin
			weboutstring("Incorrect itemcode ``" & CCitemcode & "``");
			weboutstring("<BR>");
		end;
	end else begin
		if (blank(CCitemcode)) then begin
			weboutstring("Blank parameter `` itemcode ``");
			weboutstring("<BR>");
		end;
		if (blank(cpriceazn)) then begin
			weboutstring("Blank parameter `` cpriceazn ``");
			weboutstring("<BR>");
		end;
		if (blank(cpricecb)) then begin
			weboutstring("Blank parameter `` cpricecb ``");
			weboutstring("<BR>");
		end;
	end;
	
	
	
	
return;
end;














global updating procedure CorrectErrorsSHFromIDGroupComp()
begin
	record SHVc SHr;
	row SHVc SHrw;
	record POVc POr;
	record PUVc PUr;
	row PUVc PUrw;
	boolean TrHs, testf, remf, updf;
	integer MainCompany, i, j, LCNt, trdouble;
	record ECVendFobSetBlaock CObjr;
	row ECVendFobSetBlaock CObjrw;
	vector integer vObjComp;
	vector val vItemFRV;
	record RLinkVc RLr;
	LongInt PUrSerNr, cnt1, cnt2, shcnt, trmtrw;
	record ItemHistVc IHr, oldIHr;
	record TRVc TRr, oldTRr;
	row TRVc TRrw;
	
	
	MainCompany = 18;
	
	SetCompany(MainCompany,false);
	BlockLoad(CObjr);
	for (i=0;i<matrowcnt(CObjr);i=i+1) begin
		matrowget(CObjr,i,CObjrw);
		vObjComp[CObjrw.VendName] = CObjrw.CompanyNr;
	end;
	
	SHr.OKFlag = 1;
	TrHs = true;
	
	cnt1 = 0;
	cnt2 = 0;
	shcnt = 0;
	while (loopkey("OKFlag",SHr,1,TrHs)) begin
		updf = false;
		if (SHr.OKFlag != 1) then begin TrHs = false; end;
		if (TrHs) then begin
			for (i=0;i<matrowcnt(SHr);i=i+1)begin
				matrowget(SHr,i,SHrw);
				vItemFRV[SHr.SerNr & "_" & SHrw.OrdRow] = SHrw.FIFORowVal;
			end;
			LCNt = 1;
			while (ReadRecordLink(SHr,LCNt,PUr,RLr)) begin
				PUrSerNr = PUr.SerNr;
				if(setcompany(vObjComp[SHr.CustCode],false))then begin
					PUr.SerNr = PUrSerNr;
					if (ReadFirstMain(PUr,1,true)) then begin
						if (PUr.OKFlag==1) then begin
							for (i=0;i<matrowcnt(PUr);i=i+1) begin
								matrowget(PUr,i,PUrw);
								if (vItemFRV[SHr.SerNr & "_" & i] != PUrw.Sum and vItemFRV[SHr.SerNr & "_" & i]/PUrw.Sum > 1.5) then begin
									
									IHr.FileName = "PUVc";
									IHr.TransNr = PUr.SerNr;
									IHr.Row = i;
									remf = false;
									if(ReadFirstKey("FNTransNr",IHr,3,true)) then begin
										if (IHr.Qty == IHr.RemQty) then begin
											weboutstring("SH SerNr: " & SHr.SerNr & " Company: " & vObjComp[SHr.CustCode] & " PU SerNr: " & PUr.SerNr & " row: " & i+1 & " Diff: " & vItemFRV[SHr.SerNr & "_" & i] - PUrw.Sum & " Remf: " & remf);
											weboutstring("<BR>");
											logtext (0,"SH SerNr: " & SHr.SerNr);
											RecordCopy(oldIHr,IHr);
											IHr.TotCostPrice = vItemFRV[SHr.SerNr & "_" & i];
											IHr.RemCostPrice = vItemFRV[SHr.SerNr & "_" & i];
											if (RecordUpdate(oldIHr,IHr,true)==0) then begin
												weboutstring("IH Updated");
												weboutstring("<BR>");
												logtext (0,"IH Updated");
												trdouble = 0;
												trmtrw = 0;
												TRr.Number = PUr.SerNr;
												TRr.IntYc = PUYc;
												if (ReadFirstMain(TRr,2,true)) then begin
													RecordCopy(oldTRr,TRr);
													for (j=0;j<matrowcnt(TRr);j=j+1) begin
														if (trmtrw == i)then begin
															matrowget(TRr,j,TRrw);
															if (TRrw.DebVal!=blankval) then begin
																TRrw.DebVal = vItemFRV[SHr.SerNr & "_" & i];
															end;
															if (TRrw.CredVal!=blankval) then begin
																TRrw.CredVal = vItemFRV[SHr.SerNr & "_" & i];
															end;
															matrowput(TRr,j,TRrw);
														end;
														if (trdouble==1)then begin
															trdouble = 0;
															trmtrw = trmtrw + 1;
														end else begin
															trdouble = 1;
														end;
													end;
													logtext(0,TRr.Number);
													if (RecordUpdate(oldTRr,TRr,true)==0) then begin
														weboutstring("TR Updated");
														weboutstring("<BR>");
														logtext (0,"TR Updated");
														PUrw.Sum = vItemFRV[SHr.SerNr & "_" & i];
														PUrw.CostPrice = PUrw.Sum / PUrw.Quant;
														matrowput(PUr,i,PUrw);
														updf = true;
													end;
												end;
											end;
										end;
									end;
									cnt1 = cnt1 + 1;
								end;
								if (vItemFRV[SHr.SerNr & "_" & i] != PUrw.Sum and PUrw.Sum/vItemFRV[SHr.SerNr & "_" & i] > 1.5) then begin 
									
									IHr.FileName = "PUVc";
									IHr.TransNr = PUr.SerNr;
									IHr.Row = i;
									remf = false;
									if(ReadFirstKey("FNTransNr",IHr,3,true)) then begin
										if (IHr.Qty == IHr.RemQty) then begin
											weboutstring("SH SerNr: " & SHr.SerNr & " Company: " & vObjComp[SHr.CustCode] & " PU SerNr: " & PUr.SerNr & " row: " & i+1 & " Diff: " & vItemFRV[SHr.SerNr & "_" & i] - PUrw.Sum & " Remf: " & remf);
											weboutstring("<BR>");

											RecordCopy(oldIHr,IHr);
											IHr.TotCostPrice = vItemFRV[SHr.SerNr & "_" & i];
											IHr.RemCostPrice = vItemFRV[SHr.SerNr & "_" & i];
											if (RecordUpdate(oldIHr,IHr,true)==0) then begin
												weboutstring("IH Updated");
												weboutstring("<BR>");
												logtext (0,"IH Updated");
												trdouble = 0;
												trmtrw = 0;
												TRr.Number = PUr.SerNr;
												TRr.IntYc = PUYc;
												if (ReadFirstMain(TRr,2,true)) then begin
													RecordCopy(oldTRr,TRr);
													for (j=0;j<matrowcnt(TRr);j=j+1) begin
														if (trmtrw == i)then begin
															matrowget(TRr,j,TRrw);
															if (TRrw.DebVal!=blankval) then begin
																TRrw.DebVal = vItemFRV[SHr.SerNr & "_" & i];
															end;
															if (TRrw.CredVal!=blankval) then begin
																TRrw.CredVal = vItemFRV[SHr.SerNr & "_" & i];
															end;
															matrowput(TRr,j,TRrw);
														end;
														if (trdouble==1)then begin
															trdouble = 0;
															trmtrw = trmtrw + 1;
														end else begin
															trdouble = 1;
														end;
													end;
													if (RecordUpdate(oldTRr,TRr,true)==0) then begin
														weboutstring("TR Updated");
														weboutstring("<BR>");
														logtext (0,"TR Updated");
														PUrw.Sum = vItemFRV[SHr.SerNr & "_" & i];
														PUrw.CostPrice = PUrw.Sum / PUrw.Quant;
														matrowput(PUr,i,PUrw);
														updf = true;
													end;
												end;
											end;
										end;
									end;
									cnt1 = cnt1 + 1;
								end;
								// if (vItemFRV[SHr.SerNr & "_" & i] != PUrw.Sum and vItemFRV[SHr.SerNr & "_" & i] - PUrw.Sum < 1) then begin 
									// weboutstring("SH SerNr: " & SHr.SerNr & " Company: " & vObjComp[SHr.CustCode] & " PU SerNr: " & PUr.SerNr & " row: " & i+1 & " Diff: " & vItemFRV[SHr.SerNr & "_" & i] - PUrw.Sum);
									// weboutstring("<BR>");
									// cnt2 = cnt2 + 1;
								// end;
							end;
						end;
						if (updf) then begin
							RecordStore (PUr,true);
							logtext (0,"PU Updated");
						end;
					end;
				end;
				resetcompany(MainCompany);
				LCNt = LCNt + 1;
			end;
		end;
	end;
return;
end;












global updating procedure CorrectErrorsSHFromIDGroupComp()
begin
	record SHVc SHr;
	row SHVc SHrw;
	record POVc POr;
	record PUVc PUr;
	row PUVc PUrw;
	boolean TrHs, testf, remf, updf;
	integer MainCompany, i, j, LCNt, trdouble;
	record ECVendFobSetBlaock CObjr;
	row ECVendFobSetBlaock CObjrw;
	vector integer vObjComp;
	vector val vItemFRV;
	record RLinkVc RLr;
	LongInt PUrSerNr, cnt1, cnt2, shcnt, trmtrw;
	record ItemHistVc IHr, oldIHr;
	record TRVc TRr, oldTRr;
	row TRVc TRrw;
	
	
	MainCompany = 18;
	
	SetCompany(MainCompany,false);
	BlockLoad(CObjr);
	for (i=0;i<matrowcnt(CObjr);i=i+1) begin
		matrowget(CObjr,i,CObjrw);
		vObjComp[CObjrw.VendName] = CObjrw.CompanyNr;
	end;
	
	SHr.OKFlag = 1;
	TrHs = true;
	
	cnt1 = 0;
	cnt2 = 0;
	shcnt = 0;
	while (loopkey("OKFlag",SHr,1,TrHs)) begin
		updf = false;
		if (SHr.OKFlag != 1) then begin TrHs = false; end;
		if (TrHs) then begin
			for (i=0;i<matrowcnt(SHr);i=i+1)begin
				matrowget(SHr,i,SHrw);
				vItemFRV[SHr.SerNr & "_" & SHrw.OrdRow] = SHrw.FIFORowVal;
			end;
			LCNt = 1;
			while (ReadRecordLink(SHr,LCNt,PUr,RLr)) begin
				PUrSerNr = PUr.SerNr;
				if(setcompany(vObjComp[SHr.CustCode],false))then begin
					PUr.SerNr = PUrSerNr;
					if (ReadFirstMain(PUr,1,true)) then begin
						if (PUr.OKFlag==1) then begin
							for (i=0;i<matrowcnt(PUr);i=i+1) begin
								matrowget(PUr,i,PUrw);
								if (vItemFRV[SHr.SerNr & "_" & i] != PUrw.Sum and vItemFRV[SHr.SerNr & "_" & i]/PUrw.Sum > 1.5) then begin
									
									IHr.FileName = "PUVc";
									IHr.TransNr = PUr.SerNr;
									IHr.Row = i;
									remf = false;
									if(ReadFirstKey("FNTransNr",IHr,3,true)) then begin
										if (IHr.Qty == IHr.RemQty) then begin
											weboutstring("SH SerNr: " & SHr.SerNr & " Company: " & vObjComp[SHr.CustCode] & " PU SerNr: " & PUr.SerNr & " row: " & i+1 & " Diff: " & vItemFRV[SHr.SerNr & "_" & i] - PUrw.Sum & " Remf: " & remf);
											weboutstring("<BR>");
											logtext (0,"SH SerNr: " & SHr.SerNr);
											RecordCopy(oldIHr,IHr);
											IHr.TotCostPrice = vItemFRV[SHr.SerNr & "_" & i];
											IHr.RemCostPrice = vItemFRV[SHr.SerNr & "_" & i];
											if (RecordUpdate(oldIHr,IHr,true)==0) then begin
												weboutstring("IH Updated");
												weboutstring("<BR>");
												logtext (0,"IH Updated");
												trdouble = 0;
												trmtrw = 0;
												TRr.Number = PUr.SerNr;
												TRr.IntYc = PUYc;
												if (ReadFirstMain(TRr,2,true)) then begin
													RecordCopy(oldTRr,TRr);
													for (j=0;j<matrowcnt(TRr);j=j+1) begin
														if (trmtrw == i)then begin
															matrowget(TRr,j,TRrw);
															if (TRrw.DebVal!=blankval) then begin
																TRrw.DebVal = vItemFRV[SHr.SerNr & "_" & i];
															end;
															if (TRrw.CredVal!=blankval) then begin
																TRrw.CredVal = vItemFRV[SHr.SerNr & "_" & i];
															end;
															matrowput(TRr,j,TRrw);
														end;
														if (trdouble==1)then begin
															trdouble = 0;
															trmtrw = trmtrw + 1;
														end else begin
															trdouble = 1;
														end;
													end;
													logtext(0,TRr.Number);
													if (RecordUpdate(oldTRr,TRr,true)==0) then begin
														weboutstring("TR Updated");
														weboutstring("<BR>");
														logtext (0,"TR Updated");
														PUrw.Sum = vItemFRV[SHr.SerNr & "_" & i];
														PUrw.CostPrice = PUrw.Sum / PUrw.Quant;
														matrowput(PUr,i,PUrw);
														updf = true;
													end;
												end;
											end;
										end;
									end;
									cnt1 = cnt1 + 1;
								end;
								if (vItemFRV[SHr.SerNr & "_" & i] != PUrw.Sum and PUrw.Sum/vItemFRV[SHr.SerNr & "_" & i] > 1.5) then begin 
									
									IHr.FileName = "PUVc";
									IHr.TransNr = PUr.SerNr;
									IHr.Row = i;
									remf = false;
									if(ReadFirstKey("FNTransNr",IHr,3,true)) then begin
										if (IHr.Qty == IHr.RemQty) then begin
											weboutstring("SH SerNr: " & SHr.SerNr & " Company: " & vObjComp[SHr.CustCode] & " PU SerNr: " & PUr.SerNr & " row: " & i+1 & " Diff: " & vItemFRV[SHr.SerNr & "_" & i] - PUrw.Sum & " Remf: " & remf);
											weboutstring("<BR>");

											RecordCopy(oldIHr,IHr);
											IHr.TotCostPrice = vItemFRV[SHr.SerNr & "_" & i];
											IHr.RemCostPrice = vItemFRV[SHr.SerNr & "_" & i];
											if (RecordUpdate(oldIHr,IHr,true)==0) then begin
												weboutstring("IH Updated");
												weboutstring("<BR>");
												logtext (0,"IH Updated");
												trdouble = 0;
												trmtrw = 0;
												TRr.Number = PUr.SerNr;
												TRr.IntYc = PUYc;
												if (ReadFirstMain(TRr,2,true)) then begin
													RecordCopy(oldTRr,TRr);
													for (j=0;j<matrowcnt(TRr);j=j+1) begin
														if (trmtrw == i)then begin
															matrowget(TRr,j,TRrw);
															if (TRrw.DebVal!=blankval) then begin
																TRrw.DebVal = vItemFRV[SHr.SerNr & "_" & i];
															end;
															if (TRrw.CredVal!=blankval) then begin
																TRrw.CredVal = vItemFRV[SHr.SerNr & "_" & i];
															end;
															matrowput(TRr,j,TRrw);
														end;
														if (trdouble==1)then begin
															trdouble = 0;
															trmtrw = trmtrw + 1;
														end else begin
															trdouble = 1;
														end;
													end;
													if (RecordUpdate(oldTRr,TRr,true)==0) then begin
														weboutstring("TR Updated");
														weboutstring("<BR>");
														logtext (0,"TR Updated");
														PUrw.Sum = vItemFRV[SHr.SerNr & "_" & i];
														PUrw.CostPrice = PUrw.Sum / PUrw.Quant;
														matrowput(PUr,i,PUrw);
														updf = true;
													end;
												end;
											end;
										end;
									end;
									cnt1 = cnt1 + 1;
								end;
								// if (vItemFRV[SHr.SerNr & "_" & i] != PUrw.Sum and vItemFRV[SHr.SerNr & "_" & i] - PUrw.Sum < 1) then begin 
									// weboutstring("SH SerNr: " & SHr.SerNr & " Company: " & vObjComp[SHr.CustCode] & " PU SerNr: " & PUr.SerNr & " row: " & i+1 & " Diff: " & vItemFRV[SHr.SerNr & "_" & i] - PUrw.Sum);
									// weboutstring("<BR>");
									// cnt2 = cnt2 + 1;
								// end;
							end;
						end;
						if (updf) then begin
							RecordStore (PUr,true);
							logtext (0,"PU Updated");
						end;
					end;
				end;
				resetcompany(MainCompany);
				LCNt = LCNt + 1;
			end;
		end;
	end;
return;
end;





global updating procedure QueuedBenchmarkTest(var record GlobalItemVc GIr)
begin
	
	logtext(0,"QueuedBenchmarkTest " & GIr.Code);
	GIr.TPCPCode = 1;
	recordstore(GIr,true);
	
return;
end;

global webpublic procedure WebBenchmarkTest()
begin
	record GlobalItemVc GIr;
	longint stick,etick,recordcounter,updrecordcounter,slipcont;
	val alltime;
	boolean TrHs;
	
	setcompany(1,false);
	stick = GetCurTick;
	recordcounter = 0;
	TrHs = true;
	while(loopmain(GIr,1,TrHs))begin
		if(fileexists("stop"))then begin
			TrHs = false;
		end;
		if(recordcounter>10)then begin
			//TrHs = false;
		end;
		recordcounter = recordcounter + 1;
		queued.QueuedBenchmarkTest(GIr);
		if(slipcont>10)then begin
			millisleep(20);
			slipcont = 0;
		end;
		slipcont = slipcont + 1;
		//recordstore(GIr,true);
	end;
	etick = GetCurTick;
	
	alltime = (etick-stick)/100/60/10;
	
	weboutstring("Time: " & alltime & " minutes " & etick-stick & " ticks");
	weboutstring("<BR>");
	weboutstring("RecordCount: " & recordcounter & " ");
	weboutstring("Updated RecordCount: " & updrecordcounter & " ");
return;
end;

global webpublic procedure WebBenchmarkTestCheck()
begin
	record GlobalItemVc GIr;
	longint stick,etick,recordcounter,updrecordcounter;
	val alltime;
	boolean TrHs;
	
	setcompany(1,false);
	stick = GetCurTick;
	recordcounter = 0;
	TrHs = true;
	while(loopmain(GIr,1,TrHs))begin
		if(GIr.TPCPCode=="1")then begin
			updrecordcounter = updrecordcounter + 1;
		end;
		recordcounter = recordcounter + 1;
	end;
	etick = GetCurTick;
	
	alltime = (etick-stick)/100/60/10;
	
	weboutstring("Time: " & alltime & " minutes " & etick-stick & " ticks");
	weboutstring("<BR>");
	weboutstring("RecordCount: " & recordcounter & " ");
	weboutstring("Updated RecordCount: " & updrecordcounter & " ");
return;
end;

global webpublic updating procedure WebFixItensBarcode()
begin
	record INVc INr, fINr;
	boolean TrHs;
	
	setcompany(18,false);
	
	while(loopmain(INr,1,true))begin
		if(nonblank(INr.BarCode))then begin
			fINr.AlternativeCode = INr.BarCode;
			TrHs = true;
			while(loopkey("AlternativeCode",fINr,1,TrHs))begin
				if(fINr.AlternativeCode!=INr.BarCode)then begin TrHs = false; end;
				
				if(TrHs)then begin
					if(fINr.Code!=INr.Code and INr.BPIBrand==fINr.BPIBrand)then begin
						weboutstring("<BR>");
						weboutstring(fINr.Code & " " & fINr.BPIBrand & " " & fINr.AlternativeCode & " => " & INr.Code & " " & INr.BPIBrand & " " & INr.AlternativeCode);
						INr.BarCode = "";
						recordstore(INr,true);
						stepback(INr);
					end;
				end;
			end;
			resetloop(fINr);
		end;
	end;
	
return;
end;


global webpublic updating procedure WebFindWrongFIFOIDGroup()
begin
	record INVc INr;
	record ItemHistVc IHr;
	
	setcompany(18,false);
	weboutstring("<table>");
	
	while(loopmain(IHr,1,true))begin
		if(IHr.TotCostPrice>IHr.TotCostPriceCurncy*3)then begin
			weboutstring("<tr>");
				weboutstring("<td>" & IHr.ArtCode & "</td>");
				weboutstring("<td>" & IHr.TotCostPrice & "</td>");
				weboutstring("<td>" & IHr.TotCostPriceCurncy & "</td>");
				weboutstring("<td>" & IHr.TotCostPrice/IHr.TotCostPriceCurncy & "</td>");
			weboutstring("</tr>");
		end;
	end;
	
	/*while(loopmain(INr,1,true))begin
		if(INr.LastPurchPrice*2<INr.InPrice and INr.LastPurchPrice>=INr.LastPurchPrice2 and INr.LastPurchPrice2>0) then begin
			IHr.ArtCode = INr.Code;
			if(readfirstkey("ArtCode",IHr,1,true))then begin
				weboutstring("<tr>");
				weboutstring("<td>" & INr.Code & "</td>");
				weboutstring("<td>" & INr.AlternativeCode & "</td>");
				weboutstring("<td>" & INr.InPrice & "</td>");
				weboutstring("<td>" & INr.LastPurchPrice & "</td>");
				weboutstring("<td>" & INr.InPrice/INr.LastPurchPrice & "</td>");
				weboutstring("<td>" & INr.LastPurchCurncyCode & "</td>");
				weboutstring("</tr>");
			end;
		end;
		
		
		if(INr.InPrice>INr.LastPurchPrice2*3)then begin
			IHr.ArtCode = INr.Code;
			if(readfirstkey("ArtCode",IHr,1,true))then begin
				weboutstring("<tr>");
				weboutstring("<td>" & INr.Code & "</td>");
				weboutstring("<td>" & INr.AlternativeCode & "</td>");
				weboutstring("<td>" & INr.InPrice & "</td>");
				weboutstring("<td>" & INr.LastPurchPrice2 & "</td>");
				weboutstring("<td>" & INr.InPrice/INr.LastPurchPrice2 & "</td>");
				weboutstring("<td>" & INr.LastPurchCurncyCode & "</td>");
				weboutstring("</tr>");
			end;
		end;
	end;*/
	weboutstring("</table>");

return;
end;
