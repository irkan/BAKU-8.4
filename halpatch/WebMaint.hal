external function longint DateDiff(date,date);
remote function boolean CompanyIsJWLikeCompany(Integer);
external procedure YcToStr(Integer,var string);
external updating function LongInt TRVcRecordRemove(var record TRVc,record TRVc,LongInt,LongInt);

global webpublic updating procedure WebFindAndFixItems()
begin
	record RHistVc RHr;
	boolean TrHs,testf;
	vector integer vrstr;
  array string 20 keys;
  integer i,j,counter,lastj;
  string 10 c;
  string 50 recname,compnr,mainkey;
  integer cter,pref,check;
  longint kkk;
  area workarea;
  record INVc INr,OrigINr;
  vector string 100 brandbnames;
  record BPIBrandVc BPIBrandr;
  
  setcompany(1,false);
  
  while(loopmain(BPIBrandr,1,true))begin
  	brandbnames[BPIBrandr.Code] = BPIBrandr.Name;
  end;
  
  kkk = 1;
	RHr.TransDate = stringtodate("12/02/2020");
	RHr.User = "IRKAKH";
	
	TrHs = true;
	while(loopkey("UserDateTime",RHr,2,TrHs))begin
		testf = true;
		if(RHr.TransDate!=stringtodate("12/02/2020"))then begin TrHs = false; end;
		if(RHr.User!="IRKAKH")then begin TrHs = false; end;
		
		
		
		if(testf)then begin
			testf = TrHs;
		end;
		
		if(testf)then begin
			setareazerosize(workarea);
			addtexttoarea(RHr.RecidStr,workarea);
			c = getstringfromarea(workarea,0,1);//left(RHr.RecidStr,1);
			pref = asc(c) + 1;
			compnr = getstringfromarea(workarea,1,asc(c));//mid(RHr.RecidStr,1,asc(c));
			recname = "";
			mainkey = "";
			cter = 0;
			lastj = 0;
			if(pref<getarealength(workarea))then begin
				for(j=pref;j<getarealength(workarea);j=j+1)begin
					c = getstringfromarea(workarea,j,1);//mid(RHr.RecidStr,j,1);
					if(asc(c)<48)then begin
						j = getarealength(workarea);
					end else begin
						recname = recname & c;
						lastj = j;
					end;
				end;
				
				for(j=lastj;j<getarealength(workarea);j=j+1)begin
					c = getstringfromarea(workarea,j,1);//mid(RHr.RecidStr,j,1);
					if(asc(c)<48)then begin
						if((j+1)<getarealength(workarea))then begin
							mainkey = getstringfromarea(workarea,j+1,getarealength(workarea)-(j+1));
							if(asc(left(mainkey,1))<48)then begin
								mainkey = right(mainkey,len(mainkey)-1);
							end;
						end;
						j = getarealength(workarea);
					end else begin
					end;
				end;
			end else begin
			end;
			
		end;
		
		if(testf)then begin
			if(recname=="INVc")then begin
				//weboutstring(kkk & " compnr " & compnr & "_____record " & recname & " mainkey " & mainkey);
				weboutstring("<BR>");
				kkk = kkk + 1;
				setcompany(stringtoint(compnr),false);
					INr.Code = mainkey;
					if(readfirstmain(INr,1,true))then begin
						ReadOriginalRecord(RHr,OrigINr);	
						if(blank(INr.BPIBrand) and nonblank(OrigINr.BPIBrand))then begin
							weboutstring(compnr & " Restore brand " & brandbnames[OrigINr.BPIBrand] & " for item " & INr.Code);
							INr.BPIBrand = OrigINr.BPIBrand;
							INr.BPICollection = OrigINr.BPICollection;
							INr.BPIGroup = OrigINr.BPIGroup;
							INr.BPISubGroup = OrigINr.BPISubGroup;
							INr.BPICategory = OrigINr.BPICategory;
							INr.BPIMaterial = OrigINr.BPIMaterial;
							INr.BPIColor = OrigINr.BPIColor;
							INr.BPIShape = OrigINr.BPIShape;
							INr.BPISize = OrigINr.BPISize;
							INr.BPIUse = OrigINr.BPIUse;
							INr.BPISex = OrigINr.BPISex;
							INr.BPIPlating = OrigINr.BPIPlating;
							INr.BPIClarity = OrigINr.BPIClarity;
							INr.BPIWeight = OrigINr.BPIWeight;
							INr.BPICut = OrigINr.BPICut;
							INr.BPIStone = OrigINr.BPIStone;
							INr.BPIStrap = OrigINr.BPIStrap;
							INr.BPIOdour = OrigINr.BPIOdour;
							recordstore(INr,true);
						end;
					end;
				resetcompany(1);
			end;
			//logtext(0,"compnr " & compnr & "_____record " & recname & " mainkey " & mainkey);
		end;
		
	end;
	
return;
end;

global webpublic updating procedure WebRestoreCustomNames()
begin
	record RHistVc RHr;
	boolean TrHs,testf;
	vector integer vrstr;
  array string 20 keys;
  integer i,j,counter,lastj;
  string 10 c;
  string 50 recname,compnr,mainkey;
  integer cter,pref,check;
  longint kkk;
  area workarea;
  record INVc INr,OrigINr;
  record CUVc CUr,OrigCUr;
  vector string 100 brandbnames;
  
	setcompany(1,false);
  
  
  kkk = 1;
	//RHr.TransDate = stringtodate("04/03/2020");
	//RHr.User = "CRMSYST";
	
	RHr.SerNr = 9999999999;
	
	TrHs = true;
	while(loopbackkey("MainKey",RHr,1,TrHs))begin
		testf = true;
		if(RHr.TransDate<stringtodate("04/03/2020"))then begin TrHs = false; end;
		//if(RHr.User!="CRMSYST")then begin TrHs = false; end;
		
		logtext(0,RHr.SerNr & " " & RHr.TransDate);
		
		if(testf)then begin
			testf = TrHs;
		end;
		
		if(fileexists("stop"))then begin
			TrHs = false;
		end;
		
		if(testf)then begin
			setareazerosize(workarea);
			addtexttoarea(RHr.RecidStr,workarea);
			c = getstringfromarea(workarea,0,1);//left(RHr.RecidStr,1);
			pref = asc(c) + 1;
			compnr = getstringfromarea(workarea,1,asc(c));//mid(RHr.RecidStr,1,asc(c));
			recname = "";
			mainkey = "";
			cter = 0;
			lastj = 0;
			if(pref<getarealength(workarea))then begin
				for(j=pref;j<getarealength(workarea);j=j+1)begin
					c = getstringfromarea(workarea,j,1);//mid(RHr.RecidStr,j,1);
					if(asc(c)<48)then begin
						j = getarealength(workarea);
					end else begin
						recname = recname & c;
						lastj = j;
					end;
				end;
				
				for(j=lastj;j<getarealength(workarea);j=j+1)begin
					c = getstringfromarea(workarea,j,1);//mid(RHr.RecidStr,j,1);
					if(asc(c)<48)then begin
						if((j+1)<getarealength(workarea))then begin
							mainkey = getstringfromarea(workarea,j+1,getarealength(workarea)-(j+1));
							if(asc(left(mainkey,1))<48)then begin
								mainkey = right(mainkey,len(mainkey)-1);
							end;
						end;
						j = getarealength(workarea);
					end else begin
					end;
				end;
			end else begin
			end;
			
		end;
		
		if(testf)then begin
			if(recname=="CUVc")then begin
				logtext(0,mainkey);
				//weboutstring(kkk & " compnr " & compnr & "_____record " & recname & " mainkey " & mainkey);
				//weboutstring("<BR>");
				kkk = kkk + 1;
					CUr.Code = mainkey;
					if(readfirstmain(CUr,1,true))then begin
						if(blank(CUr.Name))then begin
							ReadOriginalRecord(RHr,OrigCUr);	
							if(CUr.Name!=OrigCUr.Name and nonblank(OrigCUr.Name))then begin
								weboutstring(compnr & " Restore name " & CUr.Code & " for customer " & OrigCUr.Name);
								weboutstring("<BR>");
								CUr.Name = OrigCUr.Name;
								recordstore(CUr,true);
							end;
						end;
					end;
			end;
			//logtext(0,"compnr " & compnr & "_____record " & recname & " mainkey " & mainkey);
		end;
		
	end;
	
return;
end;



global webpublic updating procedure WebRestoreCustomNamesCUr()
begin
	record RHistVc RHr;
	boolean TrHs,testf;
	vector integer vrstr;
  array string 20 keys;
  integer i,j,counter,lastj;
  string 10 c;
  string 50 recname,compnr,mainkey;
  integer cter,pref,check;
  longint kkk;
  area workarea;
  record INVc INr,OrigINr;
  record CUVc CUr,OrigCUr;
  vector string 100 brandbnames;
  string 255 tstr;
  
	setcompany(1,false);
  
  
  kkk = 1;
	//RHr.TransDate = stringtodate("04/03/2020");
	//RHr.User = "CRMSYST";
	
	RHr.SerNr = 9999999999;
	
	TrHs = true;
	CUr.Name = "";
	while(loopkey("Name",CUr,1,TrHs))begin
		if(nonblank(CUr.Name))then begin TrHs = false; end;
		
		if(TrHs)then begin
			tstr = BuildRecordIdStr(CUr,1);
			
			RHr.RecidStr = tstr;
			if(readlastkey("RecidStr",RHr,1,true))then begin
				ReadOriginalRecord(RHr,OrigCUr);	
				if(CUr.Name!=OrigCUr.Name and nonblank(OrigCUr.Name))then begin
					weboutstring(compnr & " Restore name " & CUr.Code & " for customer " & OrigCUr.Name);
					weboutstring("<BR>");
					CUr.Name = OrigCUr.Name;
					recordstore(CUr,true);
				end;
			
			end;						
			
		end;
		
	end;
	
	/*
	TrHs = true;
	while(loopbackkey("MainKey",RHr,1,TrHs))begin
		testf = true;
		if(RHr.TransDate<stringtodate("04/03/2020"))then begin TrHs = false; end;
		//if(RHr.User!="CRMSYST")then begin TrHs = false; end;
		
		logtext(0,RHr.SerNr & " " & RHr.TransDate);
		
		if(testf)then begin
			testf = TrHs;
		end;
		
		if(fileexists("stop"))then begin
			TrHs = false;
		end;
		
		if(testf)then begin
			setareazerosize(workarea);
			addtexttoarea(RHr.RecidStr,workarea);
			c = getstringfromarea(workarea,0,1);//left(RHr.RecidStr,1);
			pref = asc(c) + 1;
			compnr = getstringfromarea(workarea,1,asc(c));//mid(RHr.RecidStr,1,asc(c));
			recname = "";
			mainkey = "";
			cter = 0;
			lastj = 0;
			if(pref<getarealength(workarea))then begin
				for(j=pref;j<getarealength(workarea);j=j+1)begin
					c = getstringfromarea(workarea,j,1);//mid(RHr.RecidStr,j,1);
					if(asc(c)<48)then begin
						j = getarealength(workarea);
					end else begin
						recname = recname & c;
						lastj = j;
					end;
				end;
				
				for(j=lastj;j<getarealength(workarea);j=j+1)begin
					c = getstringfromarea(workarea,j,1);//mid(RHr.RecidStr,j,1);
					if(asc(c)<48)then begin
						if((j+1)<getarealength(workarea))then begin
							mainkey = getstringfromarea(workarea,j+1,getarealength(workarea)-(j+1));
							if(asc(left(mainkey,1))<48)then begin
								mainkey = right(mainkey,len(mainkey)-1);
							end;
						end;
						j = getarealength(workarea);
					end else begin
					end;
				end;
			end else begin
			end;
			
		end;
		
		if(testf)then begin
			if(recname=="CUVc")then begin
				logtext(0,mainkey);
				//weboutstring(kkk & " compnr " & compnr & "_____record " & recname & " mainkey " & mainkey);
				//weboutstring("<BR>");
				kkk = kkk + 1;
					CUr.Code = mainkey;
					if(readfirstmain(CUr,1,true))then begin
						if(blank(CUr.Name))then begin
							ReadOriginalRecord(RHr,OrigCUr);	
							if(CUr.Name!=OrigCUr.Name and nonblank(OrigCUr.Name))then begin
								weboutstring(compnr & " Restore name " & CUr.Code & " for customer " & OrigCUr.Name);
								weboutstring("<BR>");
								CUr.Name = OrigCUr.Name;
								recordstore(CUr,true);
							end;
						end;
					end;
			end;
			//logtext(0,"compnr " & compnr & "_____record " & recname & " mainkey " & mainkey);
		end;
		
	end;*/
	
return;
end;



global webpublic procedure WebCheckListToClose()
begin
	area ainput,aoutput;
	longint lines,i,j;
	string 255 linestr;
	array string 50 contacts;
	vector boolean isVendor,isEmpl,hasLC,hasActiv,isClosed,isIDEA;
	record CUVc CUr;
	record LoyaltyCardVc LCr;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	integer CompQty,comp;
	record ORVc ORr;
	record IVVc IVr;
	record CSVc CSr;
	vector val LCbal;
	vector date cucrdate,lccrdate;
	vector integer contage;
	
	setcompany(1,true);
	
	blockload(Compb);
	CompQty = matrowcnt(Compb);
	logtext(0,"WebCheckListToClose start");
	
	addfiletoarea("ListToCkeckDublicates.txt",ainput,false);
	lines = countlinesinarea(ainput);
	
	addtexttoarea("Code" & chr(9),aoutput);
	addtexttoarea("is Vendor" & chr(9),aoutput);
	addtexttoarea("is Employe" & chr(9),aoutput);
	addtexttoarea("has Activity" & chr(9),aoutput);
	addtexttoarea("has LC" & chr(9),aoutput);
	addtexttoarea("LC points" & chr(9),aoutput);
	addtexttoarea("Contact Date" & chr(9),aoutput);
	addtexttoarea("LC Date" & chr(9),aoutput);
	addtexttoarea("ContactDaysAge" & chr(9),aoutput);
	addtexttoarea("IDEA Contact" & chr(9),aoutput);
	addtexttoarea("Closed in Hansa" & chr(9),aoutput);
	addtexttoarea(chr(13) & chr(10),aoutput);
	
	for(i=0;i<lines;i=i+1)begin
		linestr = getlinefromarea(ainput,i);
		
		if(nonblank(linestr))then begin
			CUr.Code = linestr;
			
			if(readfirstmain(CUr,1,true))then begin
				if(CUr.CustCat=="IDEA")then begin
					isIDEA[CUr.Code] = true;
				end;
				if(CUr.blockedFlag>0)then begin
					isClosed[CUr.Code] = true;
				end;
				cucrdate[CUr.Code] = CUr.DateCreated;
				if(CUr.VEType>0)then begin
					isVendor[CUr.Code] = true;
				end;
				if(CUr.EmployeeType>0)then begin
					isEmpl[CUr.Code] = true;
				end;
				LCr.CustCode = CUr.Code;
				if(ReadFirstKey("ActCustCode",LCr,1,true)) then begin 
					hasLC[CUr.Code] = true; 
					LCbal[CUr.Code] = LCr.PointsBalance + LCr.StartBalance + LCr.PointsBalanceTotal;
					lccrdate[CUr.Code] = LCr.StartDate;
				end;
				
				if(nonblankdate(cucrdate[CUr.Code]) or nonblankdate(lccrdate[CUr.Code]))then begin
					
					contage[CUr.Code] = datediff(currentdate,cucrdate[CUr.Code]);
					if(contage[CUr.Code]<datediff(currentdate,lccrdate[CUr.Code]))then begin
						contage[CUr.Code] = datediff(currentdate,lccrdate[CUr.Code]);
					end;
					
				end else begin
					contage[CUr.Code] = 11111;
				end;
				
				for(comp=0;comp<CompQty;comp=comp+1) begin
					matrowget(Compb,comp,Comprw);
					if(Comprw.ActiveStatus==0) then begin
						SetCompany(comp+1,false);
						ORr.CustCode = CUr.Code;
						if(ReadFirstKey("CustCode",ORr,1,true)) then begin hasActiv[CUr.Code] = true; comp = CompQty; end;
						CSr.CustCode = CUr.Code;
						if(ReadFirstMain(CSr,1,true))then begin hasActiv[CUr.Code] = true; comp = CompQty; end;
					end;
				end;
				
			end else begin
				contage[linestr] = 11111;
				isClosed[linestr] = true;
			end;
			contacts[contacts.length] = linestr;
		end else begin
			//check compained contacts
			for(j=0;j<contacts.length;j=j+1)begin
				addtexttoarea(contacts[j] & chr(9),aoutput);
				addtexttoarea(isVendor[contacts[j]] & chr(9),aoutput);
				addtexttoarea(isEmpl[contacts[j]] & chr(9),aoutput);
				addtexttoarea(hasActiv[contacts[j]] & chr(9),aoutput);
				addtexttoarea(hasLC[contacts[j]] & chr(9),aoutput);
				addtexttoarea(LCbal[contacts[j]] & chr(9),aoutput);
				addtexttoarea(cucrdate[contacts[j]] & chr(9),aoutput);
				addtexttoarea(lccrdate[contacts[j]] & chr(9),aoutput);
				addtexttoarea(contage[contacts[j]] & chr(9),aoutput);				
				addtexttoarea(isIDEA[contacts[j]] & chr(9),aoutput);
				addtexttoarea(isClosed[contacts[j]] & chr(9),aoutput);
				addtexttoarea(chr(13) & chr(10),aoutput);
			end;
			addtexttoarea(chr(13) & chr(10),aoutput);
			ClearArray(contacts);
			ClearVector(isVendor);
			ClearVector(isEmpl);
			ClearVector(hasLC);
			ClearVector(LCbal);
			ClearVector(lccrdate);
			ClearVector(cucrdate);
			ClearVector(contage);
			ClearVector(isIDEA);
			ClearVector(isClosed);
		end;
		
		
		
		
	
	end;
	
	writeareatofile(aoutput,"O_ListToCkeckDublicates.txt",0);
	
	logtext(0,"WebCheckListToClose end");
	
return;
end;

global webpublic updating procedure WebDeleteGlobalItemNotForBtrx()
begin
	record BrandsECommerceBlock BECB;
	row BrandsECommerceBlock BECBrw;
	integer i;
	vector boolean vcheck;
	record GlobalItemVc GIr,mainGIr, GI2r;
	
	
	setcompany(29,false);
	
	blockload(BECB);
	
	for (i=0;i<matrowcnt(BECB);i=i+1) begin
		matrowget(BECB,i,BECBrw);
		vcheck[BECBrw.Brand] = true;
		logtext(0,BECBrw.Brand);
	end;
	
	while(loopmain(GIr,1,true))begin
		if(vcheck[left(GIr.Code,8)])then begin
			logtext(0,"delete GIR " & GIr.Code & " " & GIr.Name);
			recorddelete(GIr);
			stepback(GIr);
		end;
	end;

return;
end;

global webpublic updating procedure WebRestoreCostAndCurncyForIN()
begin
	record INVc INr,origINr,oldINr;
	record RHistVc RHr;
	string 100 tstr;
	boolean TrHs;
	integer i;
	record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
	
	blockload(Compb);
	
	for(i=1;i<26;i=i+1)begin
		setcompany(i,false);
		matrowget(Compb,i-1,Comprw);
		if(CompanyIsJWLikeCompany(i)==false and Comprw.ActiveStatus==0)then begin
			resetloop(INr);
			while(loopmain(INr,1,true))begin
				if(INr.InPrice>0 and 	INr.LastPurchPrice2==0)then begin
					if(blank(INr.LastPurchCurncyCode))then begin
				
						tstr = BuildRecordIdStr(INr,i);
			
						RHr.RecidStr = tstr;
						RHr.SerNr = 999999999;
						TrHs = true;
						while(loopbackkey("RecidStr",RHr,2,TrHs))begin
							if(RHr.RecidStr!=tstr)then begin TrHs = false; end;
					
							if(TrHs)then begin
								ReadOriginalRecord(RHr,origINr);	
								if(origINr.Code==INr.Code and nonblank(origINr.LastPurchCurncyCode) and origINr.LastPurchPrice2>0)then begin
									weboutstring(Comprw.CompCode & "  " & INr.Code & " Restore CURNCY " & origINr.LastPurchCurncyCode & " price " & origINr.LastPurchPrice2);
									weboutstring("<BR>");
									TrHs = false;
									/*recordcopy(oldINr,INr);
										INr.LastPurchCurncyCode = origINr.LastPurchCurncyCode;
										INr.LastPurchPrice2 = origINr.LastPurchPrice2;
									recordupdate(oldINr,INr,true);*/
								end;
							end;
			
						end;
						resetloop(RHr);
						
					end;
				end;
			end;
		end;
	
	end;
	
	
return;
end;



global webpublic updating procedure WebMoveTransFromIDtoFound()
begin
	Record TRVc TRr,copyTRr;
	row TRVc TRrw;
	boolean TrHs,testf,foundf,copyflag,deleteflag;
	integer i,rwcnt,j;
	array string 20 typrtomove;
	string 100 temstr;
	record CLInVc CLInr;
	record CLOutVc CLOutr;
	
	copyflag = false;//!!!!!!!!!!!!!!!!!!!!!!!!! change to true if transfer to 33!!!
	deleteflag = false;// set tru if delete all in 18!!!
	
	if(fileexists("demoserver"))then begin
		copyflag = true;
	end;
	copyflag = true;
	
	setcompany(18,false);
	
	typrtomove[0] = "HOLDING";
	typrtomove[1] = "OBJECT_2";
	typrtomove[2] = "OBJECT_3";
	typrtomove[3] = "OBJECT_4";
	typrtomove[4] = "OBJECT_5";
	typrtomove[5] = "OBJECT_6";
	typrtomove[6] = "AMAF";
	typrtomove[7] = "AGROPARK";
	typrtomove[8] = "AZAD ";
	
	weboutstring("<html>");
	weboutstring("<head>");
		weboutstring("<script src=\"https://code.jquery.com/jquery-3.4.1.js\"></script>");
		weboutstring("<script>");
			weboutstring("$(document).ready(function() {");
				weboutstring("$('tr:not(.header)').hide();");

				weboutstring("$('tr.header').click(function() {");
					weboutstring("$(this).find('span').text(function(_, value) {");
						weboutstring("return value == '-' ? '+' : '-'");
					weboutstring("});");
		
					weboutstring("$(this).nextUntil('tr.header').slideToggle(100, function() {});");
				weboutstring("});");
			weboutstring("});");
		weboutstring("</script>");
	
		weboutstring("<style>");
			weboutstring("table,");
			weboutstring("tr,");
			weboutstring("td,");
			weboutstring("th {");
				weboutstring("border: 1px solid black;");
				weboutstring("border-collapse: collapse;");
			weboutstring("}");

			weboutstring("tr.header {");
				weboutstring("cursor: pointer;");
			weboutstring("}");

		weboutstring("</style>");
		
	weboutstring("</head>");
	
	weboutstring("<table>");
	

	TRr.TransDate = stringtodate("01/01/2020");
	TrHs = true;
	while(loopkey("TransDate",TRr,1,TrHs))begin
		testf = true;
		if(TRr.TransDate<stringtodate("01/01/2020"))then begin TrHs = false; testf = false; end;
		if(TRr.IntYc>=300)then begin testf = false; end;
		if(TRr.IntYc==203)then begin testf = false; end;
		if(TRr.IntYc==204)then begin testf = false; end;
		if(TRr.IntYc==205)then begin testf = false; end;
		
		if(testf)then begin
			foundf = false;
			rwcnt = matrowcnt(TRr);
			for(i=0;i<rwcnt;i=i+1)begin
				matrowget(TRr,i,TRrw);
				if(TRrw.stp==1 and TRrw.ovst==0)then begin
					for(j=0;j<typrtomove.length;j=j+1)begin
						if(setinset(typrtomove[j],TRrw.Objects))then begin
							if(typrtomove[j]=="HOLDING" and TRrw.AccNumber=="50")then begin
								foundf = true;
							end;
							if(typrtomove[j]!="HOLDING")then begin
								foundf = true;
							end;
						end;
					end;
				end;
			end;
			
			if(foundf)then begin
				
				if(deleteflag)then begin
					if(TRr.IntYc==212)then begin
						CLOutr.SerNr = TRr.Number;
						if(readfirstmain(CLOutr,1,true))then begin
							recorddelete(CLOutr);
							logtext(0,"CLOutr recorddelete in 18 " & CLOutr.SerNr);
						end;
					end;
					if(TRr.IntYc==211)then begin
						CLInr.SerNr = TRr.Number;
						if(readfirstmain(CLInr,1,true))then begin
								recorddelete(CLInr);
								logtext(0,"CLInr recorddelete in 18 " & CLInr.SerNr);
						end;
					end;
					if (TRVcRecordRemove(TRr,TRr,0,0)<=0) then begin
          end;
					recorddelete(TRr);
					stepback(TRr);
				end;
				
				
				if(copyflag)then begin
					if(TRr.IntYc==212)then begin
						CLOutr.SerNr = TRr.Number;
						if(readfirstmain(CLOutr,1,true))then begin
							setcompany(33,false);
								recordstore(CLOutr,true);
								logtext(0,3);
								logtext(0,"CLOutr saved in 33 " & CLOutr.SerNr);
							setcompany(18,false);
							logtext(0,2);
						end;
					end;
					logtext(0,1);
					if(TRr.IntYc==211)then begin
						CLInr.SerNr = TRr.Number;
						if(readfirstmain(CLInr,1,true))then begin
							setcompany(33,false);
								recordstore(CLInr,true);
								logtext(0,"CLInr saved in 33 " & CLInr.SerNr);
							setcompany(18,false);
						end;
					end;
					logtext(0,"CopyTR");
					recordcopy(copyTRr,TRr);
					if(copyTRr.IntYc<200)then begin
						copyTRr.IntYc = 55;
					end;		
					logtext(0,"CopyTR1");
					setcompany(33,false);	
					logtext(0,"CopyTR2");		
					logtext(0,"TRVc saved in 33 " & copyTRr.Number & " " & copyTRr.IntYc);
					recordstore(copyTRr,true);
					logtext(0,"CopyTR3");
					setcompany(18,false);
					logtext(0,"CopyTR4");
				end;

				
				weboutstring("<tr class=\"header\">");
				
				weboutstring("<td>" & TRr.TransDate & "</td>");
				temstr = "";
				YcToStr(TRr.IntYc,temstr);
				weboutstring("<td>" & TRr.IntYc & "</td>");
				weboutstring("<td>" & temstr & "</td>");
				weboutstring("<td>" & TRr.Comment & "</td>");
				
				weboutstring("</tr>");
				
				for(i=0;i<rwcnt;i=i+1)begin
					matrowget(TRr,i,TRrw);
					if(TRrw.stp==1 and TRrw.ovst==0)then begin
						weboutstring("<tr bgcolor=\"#ffcc00\">");
							weboutstring("<td>" & TRrw.AccNumber & "</td>");
							weboutstring("<td>" & TRrw.Objects & "</td>");
							weboutstring("<td>" & TRrw.Comment & "</td>");
							weboutstring("<td>" & TRrw.DebVal & "</td>");
							weboutstring("<td>" & TRrw.CredVal & "</td>");
							weboutstring("<td>" & TRrw.Curncy & "</td>");
							weboutstring("<td>" & TRrw.CurDebVal & "</td>");
							weboutstring("<td>" & TRrw.CurCredVal & "</td>");
						weboutstring("</tr>");
					end;
				end;
				
				
				
				
			end;
			
		end;
		
	end;
	
	weboutstring("</table>");
	weboutstring("</html>");
return;
end;

